
//line parse.rl:1
// -*-go-*-
package cron

import (
    "strconv"
    "fmt"
    "time"
    "errors"
)
// the following comment is there so it will end up, in the generated code.
// Code generated by ragel DO NOT EDIT.


//line parse.rl:14

//line parse.rl:15

//line parse.go:21
const parse_start int = 406
const parse_first_final int = 406
const parse_error int = 0

const parse_en_sevenPos int = 11
const parse_en_sixPos int = 152
const parse_en_fivePos int = 283
const parse_en_main int = 406


//line parse.rl:16

func parse(s string, tz *time.Location)(nextTime, error){
    nt:=nextTime{loc:tz}
    cs, p, pe, eof:= 0, 0,len(s), len(s)


    // init scanner vars
    act, ts, te := 0, 0, 0
    _, _, _ = act, ts, te // we have to do this.

    // for fcall
    top := 0
    _ = top
    stack := [8]int{}
    mark, backtrack := 0,0
    _ = mark
    _ = backtrack
    m, d, start, end:=uint64(0), uint64(0), uint64(0), uint64(0)
    _ = d
    // TODO(docmerlin): handle ranges
    var err error
    
//line parse.go:55
	{
	cs = parse_start
	top = 0
	ts = 0
	te = 0
	act = 0
	}

//line parse.rl:38
    //m,h := 1<<0,1<<0
    
//line parse.rl:588


    
//line parse.go:71
	{
	if p == pe {
		goto _test_eof
	}
	switch cs {
	case 406:
		goto st_case_406
	case 0:
		goto st_case_0
	case 407:
		goto st_case_407
	case 1:
		goto st_case_1
	case 2:
		goto st_case_2
	case 3:
		goto st_case_3
	case 4:
		goto st_case_4
	case 5:
		goto st_case_5
	case 6:
		goto st_case_6
	case 7:
		goto st_case_7
	case 8:
		goto st_case_8
	case 408:
		goto st_case_408
	case 9:
		goto st_case_9
	case 409:
		goto st_case_409
	case 10:
		goto st_case_10
	case 410:
		goto st_case_410
	case 11:
		goto st_case_11
	case 12:
		goto st_case_12
	case 13:
		goto st_case_13
	case 14:
		goto st_case_14
	case 15:
		goto st_case_15
	case 16:
		goto st_case_16
	case 17:
		goto st_case_17
	case 18:
		goto st_case_18
	case 19:
		goto st_case_19
	case 20:
		goto st_case_20
	case 21:
		goto st_case_21
	case 22:
		goto st_case_22
	case 23:
		goto st_case_23
	case 411:
		goto st_case_411
	case 412:
		goto st_case_412
	case 24:
		goto st_case_24
	case 413:
		goto st_case_413
	case 25:
		goto st_case_25
	case 414:
		goto st_case_414
	case 26:
		goto st_case_26
	case 415:
		goto st_case_415
	case 27:
		goto st_case_27
	case 28:
		goto st_case_28
	case 29:
		goto st_case_29
	case 30:
		goto st_case_30
	case 31:
		goto st_case_31
	case 32:
		goto st_case_32
	case 33:
		goto st_case_33
	case 34:
		goto st_case_34
	case 35:
		goto st_case_35
	case 36:
		goto st_case_36
	case 37:
		goto st_case_37
	case 38:
		goto st_case_38
	case 39:
		goto st_case_39
	case 40:
		goto st_case_40
	case 41:
		goto st_case_41
	case 42:
		goto st_case_42
	case 43:
		goto st_case_43
	case 44:
		goto st_case_44
	case 45:
		goto st_case_45
	case 46:
		goto st_case_46
	case 47:
		goto st_case_47
	case 48:
		goto st_case_48
	case 49:
		goto st_case_49
	case 50:
		goto st_case_50
	case 51:
		goto st_case_51
	case 52:
		goto st_case_52
	case 53:
		goto st_case_53
	case 54:
		goto st_case_54
	case 55:
		goto st_case_55
	case 56:
		goto st_case_56
	case 57:
		goto st_case_57
	case 58:
		goto st_case_58
	case 59:
		goto st_case_59
	case 60:
		goto st_case_60
	case 61:
		goto st_case_61
	case 62:
		goto st_case_62
	case 63:
		goto st_case_63
	case 64:
		goto st_case_64
	case 65:
		goto st_case_65
	case 66:
		goto st_case_66
	case 67:
		goto st_case_67
	case 68:
		goto st_case_68
	case 69:
		goto st_case_69
	case 70:
		goto st_case_70
	case 71:
		goto st_case_71
	case 72:
		goto st_case_72
	case 73:
		goto st_case_73
	case 74:
		goto st_case_74
	case 75:
		goto st_case_75
	case 76:
		goto st_case_76
	case 77:
		goto st_case_77
	case 78:
		goto st_case_78
	case 79:
		goto st_case_79
	case 80:
		goto st_case_80
	case 81:
		goto st_case_81
	case 82:
		goto st_case_82
	case 83:
		goto st_case_83
	case 84:
		goto st_case_84
	case 85:
		goto st_case_85
	case 86:
		goto st_case_86
	case 87:
		goto st_case_87
	case 88:
		goto st_case_88
	case 89:
		goto st_case_89
	case 90:
		goto st_case_90
	case 91:
		goto st_case_91
	case 92:
		goto st_case_92
	case 93:
		goto st_case_93
	case 94:
		goto st_case_94
	case 95:
		goto st_case_95
	case 96:
		goto st_case_96
	case 97:
		goto st_case_97
	case 98:
		goto st_case_98
	case 99:
		goto st_case_99
	case 100:
		goto st_case_100
	case 101:
		goto st_case_101
	case 102:
		goto st_case_102
	case 103:
		goto st_case_103
	case 104:
		goto st_case_104
	case 105:
		goto st_case_105
	case 106:
		goto st_case_106
	case 107:
		goto st_case_107
	case 108:
		goto st_case_108
	case 109:
		goto st_case_109
	case 110:
		goto st_case_110
	case 111:
		goto st_case_111
	case 112:
		goto st_case_112
	case 113:
		goto st_case_113
	case 114:
		goto st_case_114
	case 115:
		goto st_case_115
	case 116:
		goto st_case_116
	case 117:
		goto st_case_117
	case 118:
		goto st_case_118
	case 119:
		goto st_case_119
	case 120:
		goto st_case_120
	case 121:
		goto st_case_121
	case 122:
		goto st_case_122
	case 123:
		goto st_case_123
	case 124:
		goto st_case_124
	case 125:
		goto st_case_125
	case 126:
		goto st_case_126
	case 127:
		goto st_case_127
	case 128:
		goto st_case_128
	case 129:
		goto st_case_129
	case 130:
		goto st_case_130
	case 131:
		goto st_case_131
	case 132:
		goto st_case_132
	case 133:
		goto st_case_133
	case 134:
		goto st_case_134
	case 135:
		goto st_case_135
	case 136:
		goto st_case_136
	case 137:
		goto st_case_137
	case 138:
		goto st_case_138
	case 139:
		goto st_case_139
	case 140:
		goto st_case_140
	case 141:
		goto st_case_141
	case 142:
		goto st_case_142
	case 143:
		goto st_case_143
	case 144:
		goto st_case_144
	case 145:
		goto st_case_145
	case 146:
		goto st_case_146
	case 147:
		goto st_case_147
	case 148:
		goto st_case_148
	case 149:
		goto st_case_149
	case 150:
		goto st_case_150
	case 151:
		goto st_case_151
	case 152:
		goto st_case_152
	case 153:
		goto st_case_153
	case 154:
		goto st_case_154
	case 155:
		goto st_case_155
	case 156:
		goto st_case_156
	case 157:
		goto st_case_157
	case 158:
		goto st_case_158
	case 159:
		goto st_case_159
	case 160:
		goto st_case_160
	case 161:
		goto st_case_161
	case 162:
		goto st_case_162
	case 416:
		goto st_case_416
	case 417:
		goto st_case_417
	case 163:
		goto st_case_163
	case 418:
		goto st_case_418
	case 164:
		goto st_case_164
	case 419:
		goto st_case_419
	case 165:
		goto st_case_165
	case 420:
		goto st_case_420
	case 166:
		goto st_case_166
	case 167:
		goto st_case_167
	case 421:
		goto st_case_421
	case 168:
		goto st_case_168
	case 169:
		goto st_case_169
	case 170:
		goto st_case_170
	case 171:
		goto st_case_171
	case 172:
		goto st_case_172
	case 173:
		goto st_case_173
	case 174:
		goto st_case_174
	case 175:
		goto st_case_175
	case 176:
		goto st_case_176
	case 177:
		goto st_case_177
	case 178:
		goto st_case_178
	case 179:
		goto st_case_179
	case 422:
		goto st_case_422
	case 180:
		goto st_case_180
	case 181:
		goto st_case_181
	case 182:
		goto st_case_182
	case 183:
		goto st_case_183
	case 184:
		goto st_case_184
	case 185:
		goto st_case_185
	case 186:
		goto st_case_186
	case 187:
		goto st_case_187
	case 188:
		goto st_case_188
	case 189:
		goto st_case_189
	case 190:
		goto st_case_190
	case 191:
		goto st_case_191
	case 192:
		goto st_case_192
	case 193:
		goto st_case_193
	case 194:
		goto st_case_194
	case 195:
		goto st_case_195
	case 196:
		goto st_case_196
	case 197:
		goto st_case_197
	case 198:
		goto st_case_198
	case 199:
		goto st_case_199
	case 200:
		goto st_case_200
	case 201:
		goto st_case_201
	case 202:
		goto st_case_202
	case 203:
		goto st_case_203
	case 204:
		goto st_case_204
	case 205:
		goto st_case_205
	case 206:
		goto st_case_206
	case 207:
		goto st_case_207
	case 208:
		goto st_case_208
	case 209:
		goto st_case_209
	case 210:
		goto st_case_210
	case 211:
		goto st_case_211
	case 212:
		goto st_case_212
	case 213:
		goto st_case_213
	case 214:
		goto st_case_214
	case 215:
		goto st_case_215
	case 216:
		goto st_case_216
	case 217:
		goto st_case_217
	case 218:
		goto st_case_218
	case 219:
		goto st_case_219
	case 220:
		goto st_case_220
	case 221:
		goto st_case_221
	case 222:
		goto st_case_222
	case 223:
		goto st_case_223
	case 224:
		goto st_case_224
	case 225:
		goto st_case_225
	case 226:
		goto st_case_226
	case 227:
		goto st_case_227
	case 228:
		goto st_case_228
	case 229:
		goto st_case_229
	case 230:
		goto st_case_230
	case 231:
		goto st_case_231
	case 232:
		goto st_case_232
	case 233:
		goto st_case_233
	case 234:
		goto st_case_234
	case 235:
		goto st_case_235
	case 236:
		goto st_case_236
	case 237:
		goto st_case_237
	case 238:
		goto st_case_238
	case 239:
		goto st_case_239
	case 240:
		goto st_case_240
	case 241:
		goto st_case_241
	case 242:
		goto st_case_242
	case 243:
		goto st_case_243
	case 244:
		goto st_case_244
	case 245:
		goto st_case_245
	case 246:
		goto st_case_246
	case 247:
		goto st_case_247
	case 248:
		goto st_case_248
	case 249:
		goto st_case_249
	case 250:
		goto st_case_250
	case 251:
		goto st_case_251
	case 252:
		goto st_case_252
	case 253:
		goto st_case_253
	case 254:
		goto st_case_254
	case 255:
		goto st_case_255
	case 256:
		goto st_case_256
	case 257:
		goto st_case_257
	case 258:
		goto st_case_258
	case 259:
		goto st_case_259
	case 260:
		goto st_case_260
	case 261:
		goto st_case_261
	case 262:
		goto st_case_262
	case 263:
		goto st_case_263
	case 264:
		goto st_case_264
	case 265:
		goto st_case_265
	case 266:
		goto st_case_266
	case 267:
		goto st_case_267
	case 268:
		goto st_case_268
	case 269:
		goto st_case_269
	case 270:
		goto st_case_270
	case 271:
		goto st_case_271
	case 272:
		goto st_case_272
	case 273:
		goto st_case_273
	case 274:
		goto st_case_274
	case 275:
		goto st_case_275
	case 276:
		goto st_case_276
	case 277:
		goto st_case_277
	case 278:
		goto st_case_278
	case 279:
		goto st_case_279
	case 280:
		goto st_case_280
	case 281:
		goto st_case_281
	case 282:
		goto st_case_282
	case 283:
		goto st_case_283
	case 284:
		goto st_case_284
	case 285:
		goto st_case_285
	case 286:
		goto st_case_286
	case 287:
		goto st_case_287
	case 288:
		goto st_case_288
	case 289:
		goto st_case_289
	case 290:
		goto st_case_290
	case 291:
		goto st_case_291
	case 423:
		goto st_case_423
	case 424:
		goto st_case_424
	case 292:
		goto st_case_292
	case 425:
		goto st_case_425
	case 293:
		goto st_case_293
	case 426:
		goto st_case_426
	case 294:
		goto st_case_294
	case 427:
		goto st_case_427
	case 295:
		goto st_case_295
	case 296:
		goto st_case_296
	case 428:
		goto st_case_428
	case 297:
		goto st_case_297
	case 298:
		goto st_case_298
	case 299:
		goto st_case_299
	case 300:
		goto st_case_300
	case 301:
		goto st_case_301
	case 302:
		goto st_case_302
	case 303:
		goto st_case_303
	case 304:
		goto st_case_304
	case 305:
		goto st_case_305
	case 306:
		goto st_case_306
	case 307:
		goto st_case_307
	case 308:
		goto st_case_308
	case 429:
		goto st_case_429
	case 309:
		goto st_case_309
	case 310:
		goto st_case_310
	case 311:
		goto st_case_311
	case 312:
		goto st_case_312
	case 313:
		goto st_case_313
	case 314:
		goto st_case_314
	case 315:
		goto st_case_315
	case 316:
		goto st_case_316
	case 317:
		goto st_case_317
	case 318:
		goto st_case_318
	case 319:
		goto st_case_319
	case 320:
		goto st_case_320
	case 321:
		goto st_case_321
	case 322:
		goto st_case_322
	case 323:
		goto st_case_323
	case 324:
		goto st_case_324
	case 325:
		goto st_case_325
	case 326:
		goto st_case_326
	case 327:
		goto st_case_327
	case 328:
		goto st_case_328
	case 329:
		goto st_case_329
	case 330:
		goto st_case_330
	case 331:
		goto st_case_331
	case 332:
		goto st_case_332
	case 333:
		goto st_case_333
	case 334:
		goto st_case_334
	case 335:
		goto st_case_335
	case 336:
		goto st_case_336
	case 337:
		goto st_case_337
	case 338:
		goto st_case_338
	case 339:
		goto st_case_339
	case 340:
		goto st_case_340
	case 341:
		goto st_case_341
	case 342:
		goto st_case_342
	case 343:
		goto st_case_343
	case 344:
		goto st_case_344
	case 345:
		goto st_case_345
	case 346:
		goto st_case_346
	case 347:
		goto st_case_347
	case 348:
		goto st_case_348
	case 349:
		goto st_case_349
	case 350:
		goto st_case_350
	case 351:
		goto st_case_351
	case 352:
		goto st_case_352
	case 353:
		goto st_case_353
	case 354:
		goto st_case_354
	case 355:
		goto st_case_355
	case 356:
		goto st_case_356
	case 357:
		goto st_case_357
	case 358:
		goto st_case_358
	case 359:
		goto st_case_359
	case 360:
		goto st_case_360
	case 361:
		goto st_case_361
	case 362:
		goto st_case_362
	case 363:
		goto st_case_363
	case 364:
		goto st_case_364
	case 365:
		goto st_case_365
	case 366:
		goto st_case_366
	case 367:
		goto st_case_367
	case 368:
		goto st_case_368
	case 369:
		goto st_case_369
	case 370:
		goto st_case_370
	case 371:
		goto st_case_371
	case 372:
		goto st_case_372
	case 373:
		goto st_case_373
	case 374:
		goto st_case_374
	case 375:
		goto st_case_375
	case 376:
		goto st_case_376
	case 377:
		goto st_case_377
	case 378:
		goto st_case_378
	case 379:
		goto st_case_379
	case 380:
		goto st_case_380
	case 381:
		goto st_case_381
	case 382:
		goto st_case_382
	case 383:
		goto st_case_383
	case 384:
		goto st_case_384
	case 385:
		goto st_case_385
	case 386:
		goto st_case_386
	case 387:
		goto st_case_387
	case 388:
		goto st_case_388
	case 389:
		goto st_case_389
	case 390:
		goto st_case_390
	case 391:
		goto st_case_391
	case 392:
		goto st_case_392
	case 393:
		goto st_case_393
	case 394:
		goto st_case_394
	case 395:
		goto st_case_395
	case 396:
		goto st_case_396
	case 397:
		goto st_case_397
	case 398:
		goto st_case_398
	case 399:
		goto st_case_399
	case 400:
		goto st_case_400
	case 401:
		goto st_case_401
	case 402:
		goto st_case_402
	case 403:
		goto st_case_403
	case 404:
		goto st_case_404
	case 405:
		goto st_case_405
	}
	goto st_out
tr10:
//line parse.rl:568
p = (te) - 1
{
                // set seconds to 0 second of minute
                nt.second=1
                // set year to be permissive
                nt.year.high=^uint64(0)
                nt.year.low=^uint64(0)
                p = ( mark) - 1

                {stack[top] = 406; top++; goto st283 }
                }
	goto st406
tr13:
//line parse.rl:578
p = (te) - 1
{
                // set year to be permissive
                nt.year.high=^uint64(0)
                nt.year.low=^uint64(0)
                p = ( mark) - 1

                {goto st152 }
                }
	goto st406
tr787:
//line parse.rl:40
te = p
p--
{
            mark = p;
        }
	goto st406
tr788:
//line parse.rl:568
te = p
p--
{
                // set seconds to 0 second of minute
                nt.second=1
                // set year to be permissive
                nt.year.high=^uint64(0)
                nt.year.low=^uint64(0)
                p = ( mark) - 1

                {stack[top] = 406; top++; goto st283 }
                }
	goto st406
tr789:
//line parse.rl:578
te = p
p--
{
                // set year to be permissive
                nt.year.high=^uint64(0)
                nt.year.low=^uint64(0)
                p = ( mark) - 1

                {goto st152 }
                }
	goto st406
tr790:
//line parse.rl:586
te = p
p--
{p = ( mark) - 1
{stack[top] = 406; top++; goto st11 }}
	goto st406
	st406:
//line NONE:1
ts = 0

		if p++; p == pe {
			goto _test_eof406
		}
	st_case_406:
//line NONE:1
ts = p

//line parse.go:1019
		switch ( s)[p] {
		case 32:
			goto st407
		case 42:
			goto tr786
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto tr786
				}
			case ( s)[p] >= 9:
				goto st407
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto tr786
				}
			case ( s)[p] >= 65:
				goto tr786
			}
		default:
			goto tr786
		}
		goto st0
st_case_0:
	st0:
		cs = 0
		goto _out
	st407:
		if p++; p == pe {
			goto _test_eof407
		}
	st_case_407:
		if ( s)[p] == 32 {
			goto st407
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto st407
		}
		goto tr787
tr786:
//line parse.rl:40

            mark = p;
        
	goto st1
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
//line parse.go:1076
		switch ( s)[p] {
		case 32:
			goto st2
		case 42:
			goto st1
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st1
				}
			case ( s)[p] >= 9:
				goto st2
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st1
				}
			case ( s)[p] >= 65:
				goto st1
			}
		default:
			goto st1
		}
		goto st0
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
		switch ( s)[p] {
		case 32:
			goto st2
		case 42:
			goto st3
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st3
				}
			case ( s)[p] >= 9:
				goto st2
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st3
				}
			case ( s)[p] >= 65:
				goto st3
			}
		default:
			goto st3
		}
		goto st0
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
		switch ( s)[p] {
		case 32:
			goto st4
		case 42:
			goto st3
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st3
				}
			case ( s)[p] >= 9:
				goto st4
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st3
				}
			case ( s)[p] >= 65:
				goto st3
			}
		default:
			goto st3
		}
		goto st0
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
		switch ( s)[p] {
		case 32:
			goto st4
		case 42:
			goto st5
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st5
				}
			case ( s)[p] >= 9:
				goto st4
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st5
				}
			case ( s)[p] >= 65:
				goto st5
			}
		default:
			goto st5
		}
		goto st0
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		switch ( s)[p] {
		case 32:
			goto st6
		case 42:
			goto st5
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st5
				}
			case ( s)[p] >= 9:
				goto st6
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st5
				}
			case ( s)[p] >= 65:
				goto st5
			}
		default:
			goto st5
		}
		goto st0
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		switch ( s)[p] {
		case 32:
			goto st6
		case 42:
			goto st7
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st7
				}
			case ( s)[p] >= 9:
				goto st6
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st7
				}
			case ( s)[p] >= 65:
				goto st7
			}
		default:
			goto st7
		}
		goto st0
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
		switch ( s)[p] {
		case 32:
			goto st8
		case 42:
			goto st7
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st7
				}
			case ( s)[p] >= 9:
				goto st8
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st7
				}
			case ( s)[p] >= 65:
				goto st7
			}
		default:
			goto st7
		}
		goto st0
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
		switch ( s)[p] {
		case 32:
			goto st8
		case 42:
			goto tr9
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto tr9
				}
			case ( s)[p] >= 9:
				goto st8
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto tr9
				}
			case ( s)[p] >= 65:
				goto tr9
			}
		default:
			goto tr9
		}
		goto st0
tr9:
//line NONE:1
te = p+1

	goto st408
	st408:
		if p++; p == pe {
			goto _test_eof408
		}
	st_case_408:
//line parse.go:1354
		switch ( s)[p] {
		case 32:
			goto st9
		case 42:
			goto tr9
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto tr9
				}
			case ( s)[p] >= 9:
				goto st9
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto tr9
				}
			case ( s)[p] >= 65:
				goto tr9
			}
		default:
			goto tr9
		}
		goto tr788
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
		switch ( s)[p] {
		case 32:
			goto st9
		case 42:
			goto tr12
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto tr12
				}
			case ( s)[p] >= 9:
				goto st9
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto tr12
				}
			case ( s)[p] >= 65:
				goto tr12
			}
		default:
			goto tr12
		}
		goto tr10
tr12:
//line NONE:1
te = p+1

	goto st409
	st409:
		if p++; p == pe {
			goto _test_eof409
		}
	st_case_409:
//line parse.go:1428
		switch ( s)[p] {
		case 32:
			goto st10
		case 42:
			goto tr12
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto tr12
				}
			case ( s)[p] >= 9:
				goto st10
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto tr12
				}
			case ( s)[p] >= 65:
				goto tr12
			}
		default:
			goto tr12
		}
		goto tr789
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
		switch ( s)[p] {
		case 32:
			goto st10
		case 42:
			goto st410
		}
		switch {
		case ( s)[p] < 47:
			switch {
			case ( s)[p] > 13:
				if 44 <= ( s)[p] && ( s)[p] <= 45 {
					goto st410
				}
			case ( s)[p] >= 9:
				goto st10
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st410
				}
			case ( s)[p] >= 65:
				goto st410
			}
		default:
			goto st410
		}
		goto tr13
	st410:
		if p++; p == pe {
			goto _test_eof410
		}
	st_case_410:
		if ( s)[p] == 42 {
			goto st410
		}
		switch {
		case ( s)[p] < 47:
			if 44 <= ( s)[p] && ( s)[p] <= 45 {
				goto st410
			}
		case ( s)[p] > 57:
			switch {
			case ( s)[p] > 90:
				if 97 <= ( s)[p] && ( s)[p] <= 122 {
					goto st410
				}
			case ( s)[p] >= 65:
				goto st410
			}
		default:
			goto st410
		}
		goto tr790
tr19:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st11
tr285:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:531
d=m
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st11
tr288:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st11
tr294:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st11
	st11:
//line NONE:1
ts = 0

		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
//line parse.go:1907
		if ( s)[p] == 42 {
			goto tr16
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr17
		}
		goto st0
tr16:
//line parse.rl:530
d=0;
	goto st12
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
//line parse.go:1924
		switch ( s)[p] {
		case 32:
			goto tr18
		case 44:
			goto tr19
		case 47:
			goto tr20
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr18
		}
		goto st0
tr18:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st13
tr284:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:531
d=m
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st13
tr287:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st13
tr293:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st13
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
//line parse.go:2323
		switch ( s)[p] {
		case 32:
			goto st13
		case 42:
			goto tr22
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr23
			}
		case ( s)[p] >= 9:
			goto st13
		}
		goto st0
tr22:
//line parse.rl:530
d=0;
	goto st14
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
//line parse.go:2348
		switch ( s)[p] {
		case 32:
			goto tr24
		case 44:
			goto tr25
		case 47:
			goto tr26
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr24
		}
		goto st0
tr24:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st15
tr269:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st15
tr275:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st15
tr280:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:534
d=m
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st15
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
//line parse.go:2751
		switch ( s)[p] {
		case 32:
			goto st15
		case 42:
			goto tr28
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr29
			}
		case ( s)[p] >= 9:
			goto st15
		}
		goto st0
tr28:
//line parse.rl:537
d=0;
	goto st16
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
//line parse.go:2776
		switch ( s)[p] {
		case 32:
			goto tr30
		case 44:
			goto tr31
		case 47:
			goto tr32
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr30
		}
		goto st0
tr30:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st17
tr255:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st17
tr261:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st17
tr266:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:538
d=m
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st17
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
//line parse.go:3031
		switch ( s)[p] {
		case 32:
			goto st17
		case 42:
			goto tr34
		case 70:
			goto tr36
		case 77:
			goto tr37
		case 83:
			goto tr38
		case 84:
			goto tr39
		case 87:
			goto tr40
		case 102:
			goto tr36
		case 109:
			goto tr37
		case 115:
			goto tr38
		case 116:
			goto tr39
		case 119:
			goto tr40
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr35
			}
		case ( s)[p] >= 9:
			goto st17
		}
		goto st0
tr34:
//line parse.rl:543
d=0;
	goto st18
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
//line parse.go:3076
		switch ( s)[p] {
		case 32:
			goto tr41
		case 44:
			goto tr42
		case 47:
			goto tr43
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr41
		}
		goto st0
tr41:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st19
tr201:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st19
tr212:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st19
tr217:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:544
d=m
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st19
tr222:
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st19
tr239:
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st19
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
//line parse.go:3493
		switch ( s)[p] {
		case 32:
			goto st19
		case 42:
			goto tr45
		case 65:
			goto tr47
		case 68:
			goto tr48
		case 70:
			goto tr49
		case 74:
			goto tr50
		case 77:
			goto tr51
		case 78:
			goto tr52
		case 79:
			goto tr53
		case 83:
			goto tr54
		case 97:
			goto tr47
		case 100:
			goto tr48
		case 102:
			goto tr49
		case 106:
			goto tr50
		case 109:
			goto tr51
		case 110:
			goto tr52
		case 111:
			goto tr53
		case 115:
			goto tr54
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr46
			}
		case ( s)[p] >= 9:
			goto st19
		}
		goto st0
tr45:
//line parse.rl:547
d=0;
	goto st20
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
//line parse.go:3550
		switch ( s)[p] {
		case 32:
			goto tr55
		case 44:
			goto tr56
		case 47:
			goto tr57
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr55
		}
		goto st0
tr55:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st21
tr128:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st21
tr142:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st21
tr147:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:548
d=m
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st21
tr153:
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st21
tr178:
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st21
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
//line parse.go:3853
		switch ( s)[p] {
		case 32:
			goto st21
		case 42:
			goto tr59
		case 70:
			goto tr61
		case 77:
			goto tr62
		case 83:
			goto tr63
		case 84:
			goto tr64
		case 87:
			goto tr65
		case 102:
			goto tr61
		case 109:
			goto tr62
		case 115:
			goto tr63
		case 116:
			goto tr64
		case 119:
			goto tr65
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr60
			}
		case ( s)[p] >= 9:
			goto st21
		}
		goto st0
tr59:
//line parse.rl:551
d=0;
	goto st22
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
//line parse.go:3898
		switch ( s)[p] {
		case 32:
			goto tr66
		case 44:
			goto tr67
		case 47:
			goto tr68
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr66
		}
		goto st0
tr66:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st23
tr74:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st23
tr85:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st23
tr90:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:552
d=m
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st23
tr95:
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st23
tr112:
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st23
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
//line parse.go:4255
		switch ( s)[p] {
		case 32:
			goto st23
		case 42:
			goto tr70
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr71
			}
		case ( s)[p] >= 9:
			goto st23
		}
		goto st0
tr70:
//line parse.rl:557
d=0;
	goto st411
	st411:
		if p++; p == pe {
			goto _test_eof411
		}
	st_case_411:
//line parse.go:4280
		switch ( s)[p] {
		case 32:
			goto tr791
		case 44:
			goto tr792
		case 47:
			goto tr793
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr791
		}
		goto st0
tr791:
//line parse.rl:557
 start=1970;end=2099;m=0;d=1; 
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st412
tr795:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 start=m; end=2099;d=0;
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st412
tr800:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 end=m; d=1;
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st412
tr804:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:558
d=m
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st412
	st412:
		if p++; p == pe {
			goto _test_eof412
		}
	st_case_412:
//line parse.go:4427
		if ( s)[p] == 32 {
			goto st412
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto st412
		}
		goto st0
tr792:
//line parse.rl:557
 start=1970;end=2099;m=0;d=1; 
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st24
tr796:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 start=m; end=2099;d=0;
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st24
tr801:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 end=m; d=1;
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st24
tr805:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:558
d=m
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
	goto st24
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
//line parse.go:4569
		if ( s)[p] == 42 {
			goto tr70
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr71
		}
		goto st0
tr71:
//line parse.rl:557
d=0;
//line parse.rl:40

            mark = p;
        
	goto st413
	st413:
		if p++; p == pe {
			goto _test_eof413
		}
	st_case_413:
//line parse.go:4590
		switch ( s)[p] {
		case 32:
			goto tr795
		case 44:
			goto tr796
		case 45:
			goto tr797
		case 47:
			goto tr798
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st413
			}
		case ( s)[p] >= 9:
			goto tr795
		}
		goto st0
tr797:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 start=m; end=2099;d=0;
	goto st25
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
//line parse.go:4626
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr72
		}
		goto st0
tr72:
//line parse.rl:40

            mark = p;
        
	goto st414
	st414:
		if p++; p == pe {
			goto _test_eof414
		}
	st_case_414:
//line parse.go:4642
		switch ( s)[p] {
		case 32:
			goto tr800
		case 44:
			goto tr801
		case 47:
			goto tr802
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st414
			}
		case ( s)[p] >= 9:
			goto tr800
		}
		goto st0
tr793:
//line parse.rl:557
 start=1970;end=2099;m=0;d=1; 
	goto st26
tr798:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 start=m; end=2099;d=0;
	goto st26
tr802:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 end=m; d=1;
	goto st26
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
//line parse.go:4691
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr73
		}
		goto st0
tr73:
//line parse.rl:40

            mark = p;
        
	goto st415
	st415:
		if p++; p == pe {
			goto _test_eof415
		}
	st_case_415:
//line parse.go:4707
		switch ( s)[p] {
		case 32:
			goto tr804
		case 44:
			goto tr805
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st415
			}
		case ( s)[p] >= 9:
			goto tr804
		}
		goto st0
tr67:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st27
tr75:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st27
tr86:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st27
tr91:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:552
d=m
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st27
tr96:
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st27
tr113:
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st27
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
//line parse.go:5067
		switch ( s)[p] {
		case 42:
			goto tr59
		case 70:
			goto tr61
		case 77:
			goto tr62
		case 83:
			goto tr63
		case 84:
			goto tr64
		case 87:
			goto tr65
		case 102:
			goto tr61
		case 109:
			goto tr62
		case 115:
			goto tr63
		case 116:
			goto tr64
		case 119:
			goto tr65
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr60
		}
		goto st0
tr60:
//line parse.rl:551
d=0;
//line parse.rl:40

            mark = p;
        
	goto st28
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
//line parse.go:5109
		switch ( s)[p] {
		case 32:
			goto tr74
		case 44:
			goto tr75
		case 45:
			goto tr76
		case 47:
			goto tr77
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st28
			}
		case ( s)[p] >= 9:
			goto tr74
		}
		goto st0
tr76:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
	goto st29
tr114:
//line parse.rl:551
 start=m; end=6;d=0;
	goto st29
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
//line parse.go:5149
		switch ( s)[p] {
		case 70:
			goto st33
		case 77:
			goto st36
		case 83:
			goto st38
		case 84:
			goto st41
		case 87:
			goto st44
		case 102:
			goto st33
		case 109:
			goto st36
		case 115:
			goto st38
		case 116:
			goto st41
		case 119:
			goto st44
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr79
		}
		goto st0
tr79:
//line parse.rl:40

            mark = p;
        
	goto st30
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
//line parse.go:5187
		switch ( s)[p] {
		case 32:
			goto tr85
		case 44:
			goto tr86
		case 47:
			goto tr87
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st30
			}
		case ( s)[p] >= 9:
			goto tr85
		}
		goto st0
tr68:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
	goto st31
tr77:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
	goto st31
tr87:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
	goto st31
tr97:
//line parse.rl:551
 end=m; d=1;
	goto st31
tr115:
//line parse.rl:551
 start=m; end=6;d=0;
	goto st31
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
//line parse.go:5244
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr89
		}
		goto st0
tr89:
//line parse.rl:40

            mark = p;
        
	goto st32
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
//line parse.go:5260
		switch ( s)[p] {
		case 32:
			goto tr90
		case 44:
			goto tr91
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st32
			}
		case ( s)[p] >= 9:
			goto tr90
		}
		goto st0
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		switch ( s)[p] {
		case 82:
			goto st34
		case 114:
			goto st34
		}
		goto st0
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		switch ( s)[p] {
		case 73:
			goto tr94
		case 105:
			goto tr94
		}
		goto st0
tr94:
//line parse.rl:518
m=5
	goto st35
tr99:
//line parse.rl:518
m=1
	goto st35
tr102:
//line parse.rl:518
m=6
	goto st35
tr103:
//line parse.rl:518
m=0
	goto st35
tr106:
//line parse.rl:518
m=4
	goto st35
tr107:
//line parse.rl:518
m=2
	goto st35
tr109:
//line parse.rl:518
m=3
	goto st35
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
//line parse.go:5333
		switch ( s)[p] {
		case 32:
			goto tr95
		case 44:
			goto tr96
		case 47:
			goto tr97
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr95
		}
		goto st0
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
		switch ( s)[p] {
		case 79:
			goto st37
		case 111:
			goto st37
		}
		goto st0
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
		switch ( s)[p] {
		case 78:
			goto tr99
		case 110:
			goto tr99
		}
		goto st0
	st38:
		if p++; p == pe {
			goto _test_eof38
		}
	st_case_38:
		switch ( s)[p] {
		case 65:
			goto st39
		case 85:
			goto st40
		case 97:
			goto st39
		case 117:
			goto st40
		}
		goto st0
	st39:
		if p++; p == pe {
			goto _test_eof39
		}
	st_case_39:
		switch ( s)[p] {
		case 84:
			goto tr102
		case 116:
			goto tr102
		}
		goto st0
	st40:
		if p++; p == pe {
			goto _test_eof40
		}
	st_case_40:
		switch ( s)[p] {
		case 78:
			goto tr103
		case 110:
			goto tr103
		}
		goto st0
	st41:
		if p++; p == pe {
			goto _test_eof41
		}
	st_case_41:
		switch ( s)[p] {
		case 72:
			goto st42
		case 85:
			goto st43
		case 104:
			goto st42
		case 117:
			goto st43
		}
		goto st0
	st42:
		if p++; p == pe {
			goto _test_eof42
		}
	st_case_42:
		switch ( s)[p] {
		case 85:
			goto tr106
		case 117:
			goto tr106
		}
		goto st0
	st43:
		if p++; p == pe {
			goto _test_eof43
		}
	st_case_43:
		switch ( s)[p] {
		case 69:
			goto tr107
		case 101:
			goto tr107
		}
		goto st0
	st44:
		if p++; p == pe {
			goto _test_eof44
		}
	st_case_44:
		switch ( s)[p] {
		case 69:
			goto st45
		case 101:
			goto st45
		}
		goto st0
	st45:
		if p++; p == pe {
			goto _test_eof45
		}
	st_case_45:
		switch ( s)[p] {
		case 68:
			goto tr109
		case 100:
			goto tr109
		}
		goto st0
tr61:
//line parse.rl:551
d=0;
	goto st46
	st46:
		if p++; p == pe {
			goto _test_eof46
		}
	st_case_46:
//line parse.go:5483
		switch ( s)[p] {
		case 82:
			goto st47
		case 114:
			goto st47
		}
		goto st0
	st47:
		if p++; p == pe {
			goto _test_eof47
		}
	st_case_47:
		switch ( s)[p] {
		case 73:
			goto tr111
		case 105:
			goto tr111
		}
		goto st0
tr111:
//line parse.rl:518
m=5
	goto st48
tr117:
//line parse.rl:518
m=1
	goto st48
tr120:
//line parse.rl:518
m=6
	goto st48
tr121:
//line parse.rl:518
m=0
	goto st48
tr124:
//line parse.rl:518
m=4
	goto st48
tr125:
//line parse.rl:518
m=2
	goto st48
tr127:
//line parse.rl:518
m=3
	goto st48
	st48:
		if p++; p == pe {
			goto _test_eof48
		}
	st_case_48:
//line parse.go:5536
		switch ( s)[p] {
		case 32:
			goto tr112
		case 44:
			goto tr113
		case 45:
			goto tr114
		case 47:
			goto tr115
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr112
		}
		goto st0
tr62:
//line parse.rl:551
d=0;
	goto st49
	st49:
		if p++; p == pe {
			goto _test_eof49
		}
	st_case_49:
//line parse.go:5560
		switch ( s)[p] {
		case 79:
			goto st50
		case 111:
			goto st50
		}
		goto st0
	st50:
		if p++; p == pe {
			goto _test_eof50
		}
	st_case_50:
		switch ( s)[p] {
		case 78:
			goto tr117
		case 110:
			goto tr117
		}
		goto st0
tr63:
//line parse.rl:551
d=0;
	goto st51
	st51:
		if p++; p == pe {
			goto _test_eof51
		}
	st_case_51:
//line parse.go:5589
		switch ( s)[p] {
		case 65:
			goto st52
		case 85:
			goto st53
		case 97:
			goto st52
		case 117:
			goto st53
		}
		goto st0
	st52:
		if p++; p == pe {
			goto _test_eof52
		}
	st_case_52:
		switch ( s)[p] {
		case 84:
			goto tr120
		case 116:
			goto tr120
		}
		goto st0
	st53:
		if p++; p == pe {
			goto _test_eof53
		}
	st_case_53:
		switch ( s)[p] {
		case 78:
			goto tr121
		case 110:
			goto tr121
		}
		goto st0
tr64:
//line parse.rl:551
d=0;
	goto st54
	st54:
		if p++; p == pe {
			goto _test_eof54
		}
	st_case_54:
//line parse.go:5634
		switch ( s)[p] {
		case 72:
			goto st55
		case 85:
			goto st56
		case 104:
			goto st55
		case 117:
			goto st56
		}
		goto st0
	st55:
		if p++; p == pe {
			goto _test_eof55
		}
	st_case_55:
		switch ( s)[p] {
		case 85:
			goto tr124
		case 117:
			goto tr124
		}
		goto st0
	st56:
		if p++; p == pe {
			goto _test_eof56
		}
	st_case_56:
		switch ( s)[p] {
		case 69:
			goto tr125
		case 101:
			goto tr125
		}
		goto st0
tr65:
//line parse.rl:551
d=0;
	goto st57
	st57:
		if p++; p == pe {
			goto _test_eof57
		}
	st_case_57:
//line parse.go:5679
		switch ( s)[p] {
		case 69:
			goto st58
		case 101:
			goto st58
		}
		goto st0
	st58:
		if p++; p == pe {
			goto _test_eof58
		}
	st_case_58:
		switch ( s)[p] {
		case 68:
			goto tr127
		case 100:
			goto tr127
		}
		goto st0
tr56:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st59
tr129:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st59
tr143:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st59
tr148:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:548
d=m
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st59
tr154:
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st59
tr179:
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st59
	st59:
		if p++; p == pe {
			goto _test_eof59
		}
	st_case_59:
//line parse.go:5989
		switch ( s)[p] {
		case 42:
			goto tr45
		case 65:
			goto tr47
		case 68:
			goto tr48
		case 70:
			goto tr49
		case 74:
			goto tr50
		case 77:
			goto tr51
		case 78:
			goto tr52
		case 79:
			goto tr53
		case 83:
			goto tr54
		case 97:
			goto tr47
		case 100:
			goto tr48
		case 102:
			goto tr49
		case 106:
			goto tr50
		case 109:
			goto tr51
		case 110:
			goto tr52
		case 111:
			goto tr53
		case 115:
			goto tr54
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr46
		}
		goto st0
tr46:
//line parse.rl:547
d=0;
//line parse.rl:40

            mark = p;
        
	goto st60
	st60:
		if p++; p == pe {
			goto _test_eof60
		}
	st_case_60:
//line parse.go:6043
		switch ( s)[p] {
		case 32:
			goto tr128
		case 44:
			goto tr129
		case 45:
			goto tr130
		case 47:
			goto tr131
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st60
			}
		case ( s)[p] >= 9:
			goto tr128
		}
		goto st0
tr130:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st61
tr180:
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st61
	st61:
		if p++; p == pe {
			goto _test_eof61
		}
	st_case_61:
//line parse.go:6083
		switch ( s)[p] {
		case 65:
			goto st65
		case 68:
			goto st69
		case 70:
			goto st71
		case 74:
			goto st73
		case 77:
			goto st76
		case 78:
			goto st78
		case 79:
			goto st80
		case 83:
			goto st82
		case 97:
			goto st65
		case 100:
			goto st69
		case 102:
			goto st71
		case 106:
			goto st73
		case 109:
			goto st76
		case 110:
			goto st78
		case 111:
			goto st80
		case 115:
			goto st82
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr133
		}
		goto st0
tr133:
//line parse.rl:40

            mark = p;
        
	goto st62
	st62:
		if p++; p == pe {
			goto _test_eof62
		}
	st_case_62:
//line parse.go:6133
		switch ( s)[p] {
		case 32:
			goto tr142
		case 44:
			goto tr143
		case 47:
			goto tr144
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st62
			}
		case ( s)[p] >= 9:
			goto tr142
		}
		goto st0
tr57:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
	goto st63
tr131:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st63
tr144:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
	goto st63
tr155:
//line parse.rl:547
 end=m-1; d=1;
	goto st63
tr181:
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st63
	st63:
		if p++; p == pe {
			goto _test_eof63
		}
	st_case_63:
//line parse.go:6190
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr146
		}
		goto st0
tr146:
//line parse.rl:40

            mark = p;
        
	goto st64
	st64:
		if p++; p == pe {
			goto _test_eof64
		}
	st_case_64:
//line parse.go:6206
		switch ( s)[p] {
		case 32:
			goto tr147
		case 44:
			goto tr148
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st64
			}
		case ( s)[p] >= 9:
			goto tr147
		}
		goto st0
	st65:
		if p++; p == pe {
			goto _test_eof65
		}
	st_case_65:
		switch ( s)[p] {
		case 80:
			goto st66
		case 85:
			goto st68
		case 112:
			goto st66
		case 117:
			goto st68
		}
		goto st0
	st66:
		if p++; p == pe {
			goto _test_eof66
		}
	st_case_66:
		switch ( s)[p] {
		case 82:
			goto tr152
		case 114:
			goto tr152
		}
		goto st0
tr152:
//line parse.rl:519
m=4
	goto st67
tr156:
//line parse.rl:519
m=8
	goto st67
tr158:
//line parse.rl:519
m=12
	goto st67
tr160:
//line parse.rl:519
m=2
	goto st67
tr163:
//line parse.rl:519
m=1
	goto st67
tr164:
//line parse.rl:519
m=7
	goto st67
tr165:
//line parse.rl:519
m=6
	goto st67
tr167:
//line parse.rl:519
m=3
	goto st67
tr168:
//line parse.rl:519
m=5
	goto st67
tr170:
//line parse.rl:519
m=11
	goto st67
tr172:
//line parse.rl:519
m=10
	goto st67
tr174:
//line parse.rl:519
m=9
	goto st67
	st67:
		if p++; p == pe {
			goto _test_eof67
		}
	st_case_67:
//line parse.go:6303
		switch ( s)[p] {
		case 32:
			goto tr153
		case 44:
			goto tr154
		case 47:
			goto tr155
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr153
		}
		goto st0
	st68:
		if p++; p == pe {
			goto _test_eof68
		}
	st_case_68:
		switch ( s)[p] {
		case 71:
			goto tr156
		case 103:
			goto tr156
		}
		goto st0
	st69:
		if p++; p == pe {
			goto _test_eof69
		}
	st_case_69:
		switch ( s)[p] {
		case 69:
			goto st70
		case 101:
			goto st70
		}
		goto st0
	st70:
		if p++; p == pe {
			goto _test_eof70
		}
	st_case_70:
		switch ( s)[p] {
		case 67:
			goto tr158
		case 99:
			goto tr158
		}
		goto st0
	st71:
		if p++; p == pe {
			goto _test_eof71
		}
	st_case_71:
		switch ( s)[p] {
		case 69:
			goto st72
		case 101:
			goto st72
		}
		goto st0
	st72:
		if p++; p == pe {
			goto _test_eof72
		}
	st_case_72:
		switch ( s)[p] {
		case 66:
			goto tr160
		case 98:
			goto tr160
		}
		goto st0
	st73:
		if p++; p == pe {
			goto _test_eof73
		}
	st_case_73:
		switch ( s)[p] {
		case 65:
			goto st74
		case 85:
			goto st75
		case 97:
			goto st74
		case 117:
			goto st75
		}
		goto st0
	st74:
		if p++; p == pe {
			goto _test_eof74
		}
	st_case_74:
		switch ( s)[p] {
		case 78:
			goto tr163
		case 110:
			goto tr163
		}
		goto st0
	st75:
		if p++; p == pe {
			goto _test_eof75
		}
	st_case_75:
		switch ( s)[p] {
		case 76:
			goto tr164
		case 78:
			goto tr165
		case 108:
			goto tr164
		case 110:
			goto tr165
		}
		goto st0
	st76:
		if p++; p == pe {
			goto _test_eof76
		}
	st_case_76:
		switch ( s)[p] {
		case 65:
			goto st77
		case 97:
			goto st77
		}
		goto st0
	st77:
		if p++; p == pe {
			goto _test_eof77
		}
	st_case_77:
		switch ( s)[p] {
		case 82:
			goto tr167
		case 89:
			goto tr168
		case 114:
			goto tr167
		case 121:
			goto tr168
		}
		goto st0
	st78:
		if p++; p == pe {
			goto _test_eof78
		}
	st_case_78:
		switch ( s)[p] {
		case 79:
			goto st79
		case 111:
			goto st79
		}
		goto st0
	st79:
		if p++; p == pe {
			goto _test_eof79
		}
	st_case_79:
		switch ( s)[p] {
		case 86:
			goto tr170
		case 118:
			goto tr170
		}
		goto st0
	st80:
		if p++; p == pe {
			goto _test_eof80
		}
	st_case_80:
		switch ( s)[p] {
		case 67:
			goto st81
		case 99:
			goto st81
		}
		goto st0
	st81:
		if p++; p == pe {
			goto _test_eof81
		}
	st_case_81:
		switch ( s)[p] {
		case 84:
			goto tr172
		case 116:
			goto tr172
		}
		goto st0
	st82:
		if p++; p == pe {
			goto _test_eof82
		}
	st_case_82:
		switch ( s)[p] {
		case 69:
			goto st83
		case 101:
			goto st83
		}
		goto st0
	st83:
		if p++; p == pe {
			goto _test_eof83
		}
	st_case_83:
		switch ( s)[p] {
		case 80:
			goto tr174
		case 112:
			goto tr174
		}
		goto st0
tr47:
//line parse.rl:547
d=0;
	goto st84
	st84:
		if p++; p == pe {
			goto _test_eof84
		}
	st_case_84:
//line parse.go:6529
		switch ( s)[p] {
		case 80:
			goto st85
		case 85:
			goto st87
		case 112:
			goto st85
		case 117:
			goto st87
		}
		goto st0
	st85:
		if p++; p == pe {
			goto _test_eof85
		}
	st_case_85:
		switch ( s)[p] {
		case 82:
			goto tr177
		case 114:
			goto tr177
		}
		goto st0
tr177:
//line parse.rl:519
m=4
	goto st86
tr182:
//line parse.rl:519
m=8
	goto st86
tr184:
//line parse.rl:519
m=12
	goto st86
tr186:
//line parse.rl:519
m=2
	goto st86
tr189:
//line parse.rl:519
m=1
	goto st86
tr190:
//line parse.rl:519
m=7
	goto st86
tr191:
//line parse.rl:519
m=6
	goto st86
tr193:
//line parse.rl:519
m=3
	goto st86
tr194:
//line parse.rl:519
m=5
	goto st86
tr196:
//line parse.rl:519
m=11
	goto st86
tr198:
//line parse.rl:519
m=10
	goto st86
tr200:
//line parse.rl:519
m=9
	goto st86
	st86:
		if p++; p == pe {
			goto _test_eof86
		}
	st_case_86:
//line parse.go:6606
		switch ( s)[p] {
		case 32:
			goto tr178
		case 44:
			goto tr179
		case 45:
			goto tr180
		case 47:
			goto tr181
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr178
		}
		goto st0
	st87:
		if p++; p == pe {
			goto _test_eof87
		}
	st_case_87:
		switch ( s)[p] {
		case 71:
			goto tr182
		case 103:
			goto tr182
		}
		goto st0
tr48:
//line parse.rl:547
d=0;
	goto st88
	st88:
		if p++; p == pe {
			goto _test_eof88
		}
	st_case_88:
//line parse.go:6642
		switch ( s)[p] {
		case 69:
			goto st89
		case 101:
			goto st89
		}
		goto st0
	st89:
		if p++; p == pe {
			goto _test_eof89
		}
	st_case_89:
		switch ( s)[p] {
		case 67:
			goto tr184
		case 99:
			goto tr184
		}
		goto st0
tr49:
//line parse.rl:547
d=0;
	goto st90
	st90:
		if p++; p == pe {
			goto _test_eof90
		}
	st_case_90:
//line parse.go:6671
		switch ( s)[p] {
		case 69:
			goto st91
		case 101:
			goto st91
		}
		goto st0
	st91:
		if p++; p == pe {
			goto _test_eof91
		}
	st_case_91:
		switch ( s)[p] {
		case 66:
			goto tr186
		case 98:
			goto tr186
		}
		goto st0
tr50:
//line parse.rl:547
d=0;
	goto st92
	st92:
		if p++; p == pe {
			goto _test_eof92
		}
	st_case_92:
//line parse.go:6700
		switch ( s)[p] {
		case 65:
			goto st93
		case 85:
			goto st94
		case 97:
			goto st93
		case 117:
			goto st94
		}
		goto st0
	st93:
		if p++; p == pe {
			goto _test_eof93
		}
	st_case_93:
		switch ( s)[p] {
		case 78:
			goto tr189
		case 110:
			goto tr189
		}
		goto st0
	st94:
		if p++; p == pe {
			goto _test_eof94
		}
	st_case_94:
		switch ( s)[p] {
		case 76:
			goto tr190
		case 78:
			goto tr191
		case 108:
			goto tr190
		case 110:
			goto tr191
		}
		goto st0
tr51:
//line parse.rl:547
d=0;
	goto st95
	st95:
		if p++; p == pe {
			goto _test_eof95
		}
	st_case_95:
//line parse.go:6749
		switch ( s)[p] {
		case 65:
			goto st96
		case 97:
			goto st96
		}
		goto st0
	st96:
		if p++; p == pe {
			goto _test_eof96
		}
	st_case_96:
		switch ( s)[p] {
		case 82:
			goto tr193
		case 89:
			goto tr194
		case 114:
			goto tr193
		case 121:
			goto tr194
		}
		goto st0
tr52:
//line parse.rl:547
d=0;
	goto st97
	st97:
		if p++; p == pe {
			goto _test_eof97
		}
	st_case_97:
//line parse.go:6782
		switch ( s)[p] {
		case 79:
			goto st98
		case 111:
			goto st98
		}
		goto st0
	st98:
		if p++; p == pe {
			goto _test_eof98
		}
	st_case_98:
		switch ( s)[p] {
		case 86:
			goto tr196
		case 118:
			goto tr196
		}
		goto st0
tr53:
//line parse.rl:547
d=0;
	goto st99
	st99:
		if p++; p == pe {
			goto _test_eof99
		}
	st_case_99:
//line parse.go:6811
		switch ( s)[p] {
		case 67:
			goto st100
		case 99:
			goto st100
		}
		goto st0
	st100:
		if p++; p == pe {
			goto _test_eof100
		}
	st_case_100:
		switch ( s)[p] {
		case 84:
			goto tr198
		case 116:
			goto tr198
		}
		goto st0
tr54:
//line parse.rl:547
d=0;
	goto st101
	st101:
		if p++; p == pe {
			goto _test_eof101
		}
	st_case_101:
//line parse.go:6840
		switch ( s)[p] {
		case 69:
			goto st102
		case 101:
			goto st102
		}
		goto st0
	st102:
		if p++; p == pe {
			goto _test_eof102
		}
	st_case_102:
		switch ( s)[p] {
		case 80:
			goto tr200
		case 112:
			goto tr200
		}
		goto st0
tr42:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st103
tr202:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st103
tr213:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st103
tr218:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:544
d=m
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st103
tr223:
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st103
tr240:
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st103
	st103:
		if p++; p == pe {
			goto _test_eof103
		}
	st_case_103:
//line parse.go:7264
		switch ( s)[p] {
		case 42:
			goto tr34
		case 70:
			goto tr36
		case 77:
			goto tr37
		case 83:
			goto tr38
		case 84:
			goto tr39
		case 87:
			goto tr40
		case 102:
			goto tr36
		case 109:
			goto tr37
		case 115:
			goto tr38
		case 116:
			goto tr39
		case 119:
			goto tr40
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr35
		}
		goto st0
tr35:
//line parse.rl:543
d=0;
//line parse.rl:40

            mark = p;
        
	goto st104
	st104:
		if p++; p == pe {
			goto _test_eof104
		}
	st_case_104:
//line parse.go:7306
		switch ( s)[p] {
		case 32:
			goto tr201
		case 44:
			goto tr202
		case 45:
			goto tr203
		case 47:
			goto tr204
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st104
			}
		case ( s)[p] >= 9:
			goto tr201
		}
		goto st0
tr203:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st105
tr241:
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st105
	st105:
		if p++; p == pe {
			goto _test_eof105
		}
	st_case_105:
//line parse.go:7346
		switch ( s)[p] {
		case 70:
			goto st109
		case 77:
			goto st112
		case 83:
			goto st114
		case 84:
			goto st117
		case 87:
			goto st120
		case 102:
			goto st109
		case 109:
			goto st112
		case 115:
			goto st114
		case 116:
			goto st117
		case 119:
			goto st120
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr206
		}
		goto st0
tr206:
//line parse.rl:40

            mark = p;
        
	goto st106
	st106:
		if p++; p == pe {
			goto _test_eof106
		}
	st_case_106:
//line parse.go:7384
		switch ( s)[p] {
		case 32:
			goto tr212
		case 44:
			goto tr213
		case 47:
			goto tr214
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st106
			}
		case ( s)[p] >= 9:
			goto tr212
		}
		goto st0
tr43:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
	goto st107
tr204:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st107
tr214:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
	goto st107
tr224:
//line parse.rl:543
 end=m-1; d=1;
	goto st107
tr242:
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st107
	st107:
		if p++; p == pe {
			goto _test_eof107
		}
	st_case_107:
//line parse.go:7441
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr216
		}
		goto st0
tr216:
//line parse.rl:40

            mark = p;
        
	goto st108
	st108:
		if p++; p == pe {
			goto _test_eof108
		}
	st_case_108:
//line parse.go:7457
		switch ( s)[p] {
		case 32:
			goto tr217
		case 44:
			goto tr218
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st108
			}
		case ( s)[p] >= 9:
			goto tr217
		}
		goto st0
	st109:
		if p++; p == pe {
			goto _test_eof109
		}
	st_case_109:
		switch ( s)[p] {
		case 82:
			goto st110
		case 114:
			goto st110
		}
		goto st0
	st110:
		if p++; p == pe {
			goto _test_eof110
		}
	st_case_110:
		switch ( s)[p] {
		case 73:
			goto tr221
		case 105:
			goto tr221
		}
		goto st0
tr221:
//line parse.rl:518
m=5
	goto st111
tr226:
//line parse.rl:518
m=1
	goto st111
tr229:
//line parse.rl:518
m=6
	goto st111
tr230:
//line parse.rl:518
m=0
	goto st111
tr233:
//line parse.rl:518
m=4
	goto st111
tr234:
//line parse.rl:518
m=2
	goto st111
tr236:
//line parse.rl:518
m=3
	goto st111
	st111:
		if p++; p == pe {
			goto _test_eof111
		}
	st_case_111:
//line parse.go:7530
		switch ( s)[p] {
		case 32:
			goto tr222
		case 44:
			goto tr223
		case 47:
			goto tr224
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr222
		}
		goto st0
	st112:
		if p++; p == pe {
			goto _test_eof112
		}
	st_case_112:
		switch ( s)[p] {
		case 79:
			goto st113
		case 111:
			goto st113
		}
		goto st0
	st113:
		if p++; p == pe {
			goto _test_eof113
		}
	st_case_113:
		switch ( s)[p] {
		case 78:
			goto tr226
		case 110:
			goto tr226
		}
		goto st0
	st114:
		if p++; p == pe {
			goto _test_eof114
		}
	st_case_114:
		switch ( s)[p] {
		case 65:
			goto st115
		case 85:
			goto st116
		case 97:
			goto st115
		case 117:
			goto st116
		}
		goto st0
	st115:
		if p++; p == pe {
			goto _test_eof115
		}
	st_case_115:
		switch ( s)[p] {
		case 84:
			goto tr229
		case 116:
			goto tr229
		}
		goto st0
	st116:
		if p++; p == pe {
			goto _test_eof116
		}
	st_case_116:
		switch ( s)[p] {
		case 78:
			goto tr230
		case 110:
			goto tr230
		}
		goto st0
	st117:
		if p++; p == pe {
			goto _test_eof117
		}
	st_case_117:
		switch ( s)[p] {
		case 72:
			goto st118
		case 85:
			goto st119
		case 104:
			goto st118
		case 117:
			goto st119
		}
		goto st0
	st118:
		if p++; p == pe {
			goto _test_eof118
		}
	st_case_118:
		switch ( s)[p] {
		case 85:
			goto tr233
		case 117:
			goto tr233
		}
		goto st0
	st119:
		if p++; p == pe {
			goto _test_eof119
		}
	st_case_119:
		switch ( s)[p] {
		case 69:
			goto tr234
		case 101:
			goto tr234
		}
		goto st0
	st120:
		if p++; p == pe {
			goto _test_eof120
		}
	st_case_120:
		switch ( s)[p] {
		case 69:
			goto st121
		case 101:
			goto st121
		}
		goto st0
	st121:
		if p++; p == pe {
			goto _test_eof121
		}
	st_case_121:
		switch ( s)[p] {
		case 68:
			goto tr236
		case 100:
			goto tr236
		}
		goto st0
tr36:
//line parse.rl:543
d=0;
	goto st122
	st122:
		if p++; p == pe {
			goto _test_eof122
		}
	st_case_122:
//line parse.go:7680
		switch ( s)[p] {
		case 82:
			goto st123
		case 114:
			goto st123
		}
		goto st0
	st123:
		if p++; p == pe {
			goto _test_eof123
		}
	st_case_123:
		switch ( s)[p] {
		case 73:
			goto tr238
		case 105:
			goto tr238
		}
		goto st0
tr238:
//line parse.rl:518
m=5
	goto st124
tr244:
//line parse.rl:518
m=1
	goto st124
tr247:
//line parse.rl:518
m=6
	goto st124
tr248:
//line parse.rl:518
m=0
	goto st124
tr251:
//line parse.rl:518
m=4
	goto st124
tr252:
//line parse.rl:518
m=2
	goto st124
tr254:
//line parse.rl:518
m=3
	goto st124
	st124:
		if p++; p == pe {
			goto _test_eof124
		}
	st_case_124:
//line parse.go:7733
		switch ( s)[p] {
		case 32:
			goto tr239
		case 44:
			goto tr240
		case 45:
			goto tr241
		case 47:
			goto tr242
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr239
		}
		goto st0
tr37:
//line parse.rl:543
d=0;
	goto st125
	st125:
		if p++; p == pe {
			goto _test_eof125
		}
	st_case_125:
//line parse.go:7757
		switch ( s)[p] {
		case 79:
			goto st126
		case 111:
			goto st126
		}
		goto st0
	st126:
		if p++; p == pe {
			goto _test_eof126
		}
	st_case_126:
		switch ( s)[p] {
		case 78:
			goto tr244
		case 110:
			goto tr244
		}
		goto st0
tr38:
//line parse.rl:543
d=0;
	goto st127
	st127:
		if p++; p == pe {
			goto _test_eof127
		}
	st_case_127:
//line parse.go:7786
		switch ( s)[p] {
		case 65:
			goto st128
		case 85:
			goto st129
		case 97:
			goto st128
		case 117:
			goto st129
		}
		goto st0
	st128:
		if p++; p == pe {
			goto _test_eof128
		}
	st_case_128:
		switch ( s)[p] {
		case 84:
			goto tr247
		case 116:
			goto tr247
		}
		goto st0
	st129:
		if p++; p == pe {
			goto _test_eof129
		}
	st_case_129:
		switch ( s)[p] {
		case 78:
			goto tr248
		case 110:
			goto tr248
		}
		goto st0
tr39:
//line parse.rl:543
d=0;
	goto st130
	st130:
		if p++; p == pe {
			goto _test_eof130
		}
	st_case_130:
//line parse.go:7831
		switch ( s)[p] {
		case 72:
			goto st131
		case 85:
			goto st132
		case 104:
			goto st131
		case 117:
			goto st132
		}
		goto st0
	st131:
		if p++; p == pe {
			goto _test_eof131
		}
	st_case_131:
		switch ( s)[p] {
		case 85:
			goto tr251
		case 117:
			goto tr251
		}
		goto st0
	st132:
		if p++; p == pe {
			goto _test_eof132
		}
	st_case_132:
		switch ( s)[p] {
		case 69:
			goto tr252
		case 101:
			goto tr252
		}
		goto st0
tr40:
//line parse.rl:543
d=0;
	goto st133
	st133:
		if p++; p == pe {
			goto _test_eof133
		}
	st_case_133:
//line parse.go:7876
		switch ( s)[p] {
		case 69:
			goto st134
		case 101:
			goto st134
		}
		goto st0
	st134:
		if p++; p == pe {
			goto _test_eof134
		}
	st_case_134:
		switch ( s)[p] {
		case 68:
			goto tr254
		case 100:
			goto tr254
		}
		goto st0
tr31:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st135
tr256:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st135
tr262:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st135
tr267:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:538
d=m
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st135
	st135:
		if p++; p == pe {
			goto _test_eof135
		}
	st_case_135:
//line parse.go:8138
		if ( s)[p] == 42 {
			goto tr28
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr29
		}
		goto st0
tr29:
//line parse.rl:537
d=0;
//line parse.rl:40

            mark = p;
        
	goto st136
	st136:
		if p++; p == pe {
			goto _test_eof136
		}
	st_case_136:
//line parse.go:8159
		switch ( s)[p] {
		case 32:
			goto tr255
		case 44:
			goto tr256
		case 45:
			goto tr257
		case 47:
			goto tr258
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st136
			}
		case ( s)[p] >= 9:
			goto tr255
		}
		goto st0
tr257:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
	goto st137
	st137:
		if p++; p == pe {
			goto _test_eof137
		}
	st_case_137:
//line parse.go:8195
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr260
		}
		goto st0
tr260:
//line parse.rl:40

            mark = p;
        
	goto st138
	st138:
		if p++; p == pe {
			goto _test_eof138
		}
	st_case_138:
//line parse.go:8211
		switch ( s)[p] {
		case 32:
			goto tr261
		case 44:
			goto tr262
		case 47:
			goto tr263
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st138
			}
		case ( s)[p] >= 9:
			goto tr261
		}
		goto st0
tr32:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
	goto st139
tr258:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
	goto st139
tr263:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
	goto st139
	st139:
		if p++; p == pe {
			goto _test_eof139
		}
	st_case_139:
//line parse.go:8260
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr265
		}
		goto st0
tr265:
//line parse.rl:40

            mark = p;
        
	goto st140
	st140:
		if p++; p == pe {
			goto _test_eof140
		}
	st_case_140:
//line parse.go:8276
		switch ( s)[p] {
		case 32:
			goto tr266
		case 44:
			goto tr267
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st140
			}
		case ( s)[p] >= 9:
			goto tr266
		}
		goto st0
tr25:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st141
tr270:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st141
tr276:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st141
tr281:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:534
d=m
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st141
	st141:
		if p++; p == pe {
			goto _test_eof141
		}
	st_case_141:
//line parse.go:8682
		if ( s)[p] == 42 {
			goto tr22
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr23
		}
		goto st0
tr23:
//line parse.rl:530
d=0;
//line parse.rl:40

            mark = p;
        
	goto st142
	st142:
		if p++; p == pe {
			goto _test_eof142
		}
	st_case_142:
//line parse.go:8703
		switch ( s)[p] {
		case 32:
			goto tr269
		case 44:
			goto tr270
		case 45:
			goto tr271
		case 47:
			goto tr272
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st142
			}
		case ( s)[p] >= 9:
			goto tr269
		}
		goto st0
tr271:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st143
	st143:
		if p++; p == pe {
			goto _test_eof143
		}
	st_case_143:
//line parse.go:8739
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr274
		}
		goto st0
tr274:
//line parse.rl:40

            mark = p;
        
	goto st144
	st144:
		if p++; p == pe {
			goto _test_eof144
		}
	st_case_144:
//line parse.go:8755
		switch ( s)[p] {
		case 32:
			goto tr275
		case 44:
			goto tr276
		case 47:
			goto tr277
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st144
			}
		case ( s)[p] >= 9:
			goto tr275
		}
		goto st0
tr26:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
	goto st145
tr272:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st145
tr277:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
	goto st145
	st145:
		if p++; p == pe {
			goto _test_eof145
		}
	st_case_145:
//line parse.go:8804
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr279
		}
		goto st0
tr279:
//line parse.rl:40

            mark = p;
        
	goto st146
	st146:
		if p++; p == pe {
			goto _test_eof146
		}
	st_case_146:
//line parse.go:8820
		switch ( s)[p] {
		case 32:
			goto tr280
		case 44:
			goto tr281
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st146
			}
		case ( s)[p] >= 9:
			goto tr280
		}
		goto st0
tr20:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
	goto st147
tr290:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st147
tr295:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
	goto st147
	st147:
		if p++; p == pe {
			goto _test_eof147
		}
	st_case_147:
//line parse.go:8867
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr283
		}
		goto st0
tr283:
//line parse.rl:40

            mark = p;
        
	goto st148
	st148:
		if p++; p == pe {
			goto _test_eof148
		}
	st_case_148:
//line parse.go:8883
		switch ( s)[p] {
		case 32:
			goto tr284
		case 44:
			goto tr285
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st148
			}
		case ( s)[p] >= 9:
			goto tr284
		}
		goto st0
tr17:
//line parse.rl:530
d=0;
//line parse.rl:40

            mark = p;
        
	goto st149
	st149:
		if p++; p == pe {
			goto _test_eof149
		}
	st_case_149:
//line parse.go:8912
		switch ( s)[p] {
		case 32:
			goto tr287
		case 44:
			goto tr288
		case 45:
			goto tr289
		case 47:
			goto tr290
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st149
			}
		case ( s)[p] >= 9:
			goto tr287
		}
		goto st0
tr289:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st150
	st150:
		if p++; p == pe {
			goto _test_eof150
		}
	st_case_150:
//line parse.go:8948
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr292
		}
		goto st0
tr292:
//line parse.rl:40

            mark = p;
        
	goto st151
	st151:
		if p++; p == pe {
			goto _test_eof151
		}
	st_case_151:
//line parse.go:8964
		switch ( s)[p] {
		case 32:
			goto tr293
		case 44:
			goto tr294
		case 47:
			goto tr295
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st151
			}
		case ( s)[p] >= 9:
			goto tr293
		}
		goto st0
tr300:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st152
tr539:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:531
d=m
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st152
tr542:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st152
tr548:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st152
	st152:
//line NONE:1
ts = 0

		if p++; p == pe {
			goto _test_eof152
		}
	st_case_152:
//line parse.go:9371
		if ( s)[p] == 42 {
			goto tr297
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr298
		}
		goto st0
tr297:
//line parse.rl:530
d=0;
	goto st153
	st153:
		if p++; p == pe {
			goto _test_eof153
		}
	st_case_153:
//line parse.go:9388
		switch ( s)[p] {
		case 32:
			goto tr299
		case 44:
			goto tr300
		case 47:
			goto tr301
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr299
		}
		goto st0
tr299:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st154
tr538:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:531
d=m
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st154
tr541:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st154
tr547:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:100

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.second |= 1<<m
                }else{
                    nt.second |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st154
	st154:
		if p++; p == pe {
			goto _test_eof154
		}
	st_case_154:
//line parse.go:9787
		switch ( s)[p] {
		case 32:
			goto st154
		case 42:
			goto tr303
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr304
			}
		case ( s)[p] >= 9:
			goto st154
		}
		goto st0
tr303:
//line parse.rl:530
d=0;
	goto st155
	st155:
		if p++; p == pe {
			goto _test_eof155
		}
	st_case_155:
//line parse.go:9812
		switch ( s)[p] {
		case 32:
			goto tr305
		case 44:
			goto tr306
		case 47:
			goto tr307
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr305
		}
		goto st0
tr305:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st156
tr523:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st156
tr529:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st156
tr534:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:534
d=m
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st156
	st156:
		if p++; p == pe {
			goto _test_eof156
		}
	st_case_156:
//line parse.go:10215
		switch ( s)[p] {
		case 32:
			goto st156
		case 42:
			goto tr309
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr310
			}
		case ( s)[p] >= 9:
			goto st156
		}
		goto st0
tr309:
//line parse.rl:537
d=0;
	goto st157
	st157:
		if p++; p == pe {
			goto _test_eof157
		}
	st_case_157:
//line parse.go:10240
		switch ( s)[p] {
		case 32:
			goto tr311
		case 44:
			goto tr312
		case 47:
			goto tr313
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr311
		}
		goto st0
tr311:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st158
tr509:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st158
tr515:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st158
tr520:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:538
d=m
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st158
	st158:
		if p++; p == pe {
			goto _test_eof158
		}
	st_case_158:
//line parse.go:10495
		switch ( s)[p] {
		case 32:
			goto st158
		case 42:
			goto tr315
		case 70:
			goto tr317
		case 77:
			goto tr318
		case 83:
			goto tr319
		case 84:
			goto tr320
		case 87:
			goto tr321
		case 102:
			goto tr317
		case 109:
			goto tr318
		case 115:
			goto tr319
		case 116:
			goto tr320
		case 119:
			goto tr321
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr316
			}
		case ( s)[p] >= 9:
			goto st158
		}
		goto st0
tr315:
//line parse.rl:543
d=0;
	goto st159
	st159:
		if p++; p == pe {
			goto _test_eof159
		}
	st_case_159:
//line parse.go:10540
		switch ( s)[p] {
		case 32:
			goto tr322
		case 44:
			goto tr323
		case 47:
			goto tr324
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr322
		}
		goto st0
tr322:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st160
tr455:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st160
tr466:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st160
tr471:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:544
d=m
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st160
tr476:
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st160
tr493:
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st160
	st160:
		if p++; p == pe {
			goto _test_eof160
		}
	st_case_160:
//line parse.go:10957
		switch ( s)[p] {
		case 32:
			goto st160
		case 42:
			goto tr326
		case 65:
			goto tr328
		case 68:
			goto tr329
		case 70:
			goto tr330
		case 74:
			goto tr331
		case 77:
			goto tr332
		case 78:
			goto tr333
		case 79:
			goto tr334
		case 83:
			goto tr335
		case 97:
			goto tr328
		case 100:
			goto tr329
		case 102:
			goto tr330
		case 106:
			goto tr331
		case 109:
			goto tr332
		case 110:
			goto tr333
		case 111:
			goto tr334
		case 115:
			goto tr335
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr327
			}
		case ( s)[p] >= 9:
			goto st160
		}
		goto st0
tr326:
//line parse.rl:547
d=0;
	goto st161
	st161:
		if p++; p == pe {
			goto _test_eof161
		}
	st_case_161:
//line parse.go:11014
		switch ( s)[p] {
		case 32:
			goto tr336
		case 44:
			goto tr337
		case 47:
			goto tr338
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr336
		}
		goto st0
tr336:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st162
tr382:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st162
tr396:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st162
tr401:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:548
d=m
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st162
tr407:
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st162
tr432:
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st162
	st162:
		if p++; p == pe {
			goto _test_eof162
		}
	st_case_162:
//line parse.go:11317
		switch ( s)[p] {
		case 32:
			goto st162
		case 42:
			goto tr340
		case 70:
			goto tr342
		case 77:
			goto tr343
		case 83:
			goto tr344
		case 84:
			goto tr345
		case 87:
			goto tr346
		case 102:
			goto tr342
		case 109:
			goto tr343
		case 115:
			goto tr344
		case 116:
			goto tr345
		case 119:
			goto tr346
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr341
			}
		case ( s)[p] >= 9:
			goto st162
		}
		goto st0
tr340:
//line parse.rl:551
d=0;
	goto st416
	st416:
		if p++; p == pe {
			goto _test_eof416
		}
	st_case_416:
//line parse.go:11362
		switch ( s)[p] {
		case 32:
			goto tr807
		case 44:
			goto tr808
		case 47:
			goto tr809
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr807
		}
		goto st0
tr807:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st417
tr811:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st417
tr816:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st417
tr820:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:552
d=m
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st417
tr823:
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st417
tr826:
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st417
	st417:
		if p++; p == pe {
			goto _test_eof417
		}
	st_case_417:
//line parse.go:11719
		if ( s)[p] == 32 {
			goto st417
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto st417
		}
		goto st0
tr808:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st163
tr812:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st163
tr817:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st163
tr821:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:552
d=m
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st163
tr824:
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st163
tr827:
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st163
	st163:
		if p++; p == pe {
			goto _test_eof163
		}
	st_case_163:
//line parse.go:12071
		switch ( s)[p] {
		case 42:
			goto tr340
		case 70:
			goto tr342
		case 77:
			goto tr343
		case 83:
			goto tr344
		case 84:
			goto tr345
		case 87:
			goto tr346
		case 102:
			goto tr342
		case 109:
			goto tr343
		case 115:
			goto tr344
		case 116:
			goto tr345
		case 119:
			goto tr346
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr341
		}
		goto st0
tr341:
//line parse.rl:551
d=0;
//line parse.rl:40

            mark = p;
        
	goto st418
	st418:
		if p++; p == pe {
			goto _test_eof418
		}
	st_case_418:
//line parse.go:12113
		switch ( s)[p] {
		case 32:
			goto tr811
		case 44:
			goto tr812
		case 45:
			goto tr813
		case 47:
			goto tr814
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st418
			}
		case ( s)[p] >= 9:
			goto tr811
		}
		goto st0
tr813:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
	goto st164
tr828:
//line parse.rl:551
 start=m; end=6;d=0;
	goto st164
	st164:
		if p++; p == pe {
			goto _test_eof164
		}
	st_case_164:
//line parse.go:12153
		switch ( s)[p] {
		case 70:
			goto st166
		case 77:
			goto st168
		case 83:
			goto st170
		case 84:
			goto st173
		case 87:
			goto st176
		case 102:
			goto st166
		case 109:
			goto st168
		case 115:
			goto st170
		case 116:
			goto st173
		case 119:
			goto st176
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr347
		}
		goto st0
tr347:
//line parse.rl:40

            mark = p;
        
	goto st419
	st419:
		if p++; p == pe {
			goto _test_eof419
		}
	st_case_419:
//line parse.go:12191
		switch ( s)[p] {
		case 32:
			goto tr816
		case 44:
			goto tr817
		case 47:
			goto tr818
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st419
			}
		case ( s)[p] >= 9:
			goto tr816
		}
		goto st0
tr809:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
	goto st165
tr814:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
	goto st165
tr818:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
	goto st165
tr825:
//line parse.rl:551
 end=m; d=1;
	goto st165
tr829:
//line parse.rl:551
 start=m; end=6;d=0;
	goto st165
	st165:
		if p++; p == pe {
			goto _test_eof165
		}
	st_case_165:
//line parse.go:12248
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr353
		}
		goto st0
tr353:
//line parse.rl:40

            mark = p;
        
	goto st420
	st420:
		if p++; p == pe {
			goto _test_eof420
		}
	st_case_420:
//line parse.go:12264
		switch ( s)[p] {
		case 32:
			goto tr820
		case 44:
			goto tr821
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st420
			}
		case ( s)[p] >= 9:
			goto tr820
		}
		goto st0
	st166:
		if p++; p == pe {
			goto _test_eof166
		}
	st_case_166:
		switch ( s)[p] {
		case 82:
			goto st167
		case 114:
			goto st167
		}
		goto st0
	st167:
		if p++; p == pe {
			goto _test_eof167
		}
	st_case_167:
		switch ( s)[p] {
		case 73:
			goto tr355
		case 105:
			goto tr355
		}
		goto st0
tr355:
//line parse.rl:518
m=5
	goto st421
tr357:
//line parse.rl:518
m=1
	goto st421
tr360:
//line parse.rl:518
m=6
	goto st421
tr361:
//line parse.rl:518
m=0
	goto st421
tr364:
//line parse.rl:518
m=4
	goto st421
tr365:
//line parse.rl:518
m=2
	goto st421
tr367:
//line parse.rl:518
m=3
	goto st421
	st421:
		if p++; p == pe {
			goto _test_eof421
		}
	st_case_421:
//line parse.go:12337
		switch ( s)[p] {
		case 32:
			goto tr823
		case 44:
			goto tr824
		case 47:
			goto tr825
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr823
		}
		goto st0
	st168:
		if p++; p == pe {
			goto _test_eof168
		}
	st_case_168:
		switch ( s)[p] {
		case 79:
			goto st169
		case 111:
			goto st169
		}
		goto st0
	st169:
		if p++; p == pe {
			goto _test_eof169
		}
	st_case_169:
		switch ( s)[p] {
		case 78:
			goto tr357
		case 110:
			goto tr357
		}
		goto st0
	st170:
		if p++; p == pe {
			goto _test_eof170
		}
	st_case_170:
		switch ( s)[p] {
		case 65:
			goto st171
		case 85:
			goto st172
		case 97:
			goto st171
		case 117:
			goto st172
		}
		goto st0
	st171:
		if p++; p == pe {
			goto _test_eof171
		}
	st_case_171:
		switch ( s)[p] {
		case 84:
			goto tr360
		case 116:
			goto tr360
		}
		goto st0
	st172:
		if p++; p == pe {
			goto _test_eof172
		}
	st_case_172:
		switch ( s)[p] {
		case 78:
			goto tr361
		case 110:
			goto tr361
		}
		goto st0
	st173:
		if p++; p == pe {
			goto _test_eof173
		}
	st_case_173:
		switch ( s)[p] {
		case 72:
			goto st174
		case 85:
			goto st175
		case 104:
			goto st174
		case 117:
			goto st175
		}
		goto st0
	st174:
		if p++; p == pe {
			goto _test_eof174
		}
	st_case_174:
		switch ( s)[p] {
		case 85:
			goto tr364
		case 117:
			goto tr364
		}
		goto st0
	st175:
		if p++; p == pe {
			goto _test_eof175
		}
	st_case_175:
		switch ( s)[p] {
		case 69:
			goto tr365
		case 101:
			goto tr365
		}
		goto st0
	st176:
		if p++; p == pe {
			goto _test_eof176
		}
	st_case_176:
		switch ( s)[p] {
		case 69:
			goto st177
		case 101:
			goto st177
		}
		goto st0
	st177:
		if p++; p == pe {
			goto _test_eof177
		}
	st_case_177:
		switch ( s)[p] {
		case 68:
			goto tr367
		case 100:
			goto tr367
		}
		goto st0
tr342:
//line parse.rl:551
d=0;
	goto st178
	st178:
		if p++; p == pe {
			goto _test_eof178
		}
	st_case_178:
//line parse.go:12487
		switch ( s)[p] {
		case 82:
			goto st179
		case 114:
			goto st179
		}
		goto st0
	st179:
		if p++; p == pe {
			goto _test_eof179
		}
	st_case_179:
		switch ( s)[p] {
		case 73:
			goto tr369
		case 105:
			goto tr369
		}
		goto st0
tr369:
//line parse.rl:518
m=5
	goto st422
tr371:
//line parse.rl:518
m=1
	goto st422
tr374:
//line parse.rl:518
m=6
	goto st422
tr375:
//line parse.rl:518
m=0
	goto st422
tr378:
//line parse.rl:518
m=4
	goto st422
tr379:
//line parse.rl:518
m=2
	goto st422
tr381:
//line parse.rl:518
m=3
	goto st422
	st422:
		if p++; p == pe {
			goto _test_eof422
		}
	st_case_422:
//line parse.go:12540
		switch ( s)[p] {
		case 32:
			goto tr826
		case 44:
			goto tr827
		case 45:
			goto tr828
		case 47:
			goto tr829
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr826
		}
		goto st0
tr343:
//line parse.rl:551
d=0;
	goto st180
	st180:
		if p++; p == pe {
			goto _test_eof180
		}
	st_case_180:
//line parse.go:12564
		switch ( s)[p] {
		case 79:
			goto st181
		case 111:
			goto st181
		}
		goto st0
	st181:
		if p++; p == pe {
			goto _test_eof181
		}
	st_case_181:
		switch ( s)[p] {
		case 78:
			goto tr371
		case 110:
			goto tr371
		}
		goto st0
tr344:
//line parse.rl:551
d=0;
	goto st182
	st182:
		if p++; p == pe {
			goto _test_eof182
		}
	st_case_182:
//line parse.go:12593
		switch ( s)[p] {
		case 65:
			goto st183
		case 85:
			goto st184
		case 97:
			goto st183
		case 117:
			goto st184
		}
		goto st0
	st183:
		if p++; p == pe {
			goto _test_eof183
		}
	st_case_183:
		switch ( s)[p] {
		case 84:
			goto tr374
		case 116:
			goto tr374
		}
		goto st0
	st184:
		if p++; p == pe {
			goto _test_eof184
		}
	st_case_184:
		switch ( s)[p] {
		case 78:
			goto tr375
		case 110:
			goto tr375
		}
		goto st0
tr345:
//line parse.rl:551
d=0;
	goto st185
	st185:
		if p++; p == pe {
			goto _test_eof185
		}
	st_case_185:
//line parse.go:12638
		switch ( s)[p] {
		case 72:
			goto st186
		case 85:
			goto st187
		case 104:
			goto st186
		case 117:
			goto st187
		}
		goto st0
	st186:
		if p++; p == pe {
			goto _test_eof186
		}
	st_case_186:
		switch ( s)[p] {
		case 85:
			goto tr378
		case 117:
			goto tr378
		}
		goto st0
	st187:
		if p++; p == pe {
			goto _test_eof187
		}
	st_case_187:
		switch ( s)[p] {
		case 69:
			goto tr379
		case 101:
			goto tr379
		}
		goto st0
tr346:
//line parse.rl:551
d=0;
	goto st188
	st188:
		if p++; p == pe {
			goto _test_eof188
		}
	st_case_188:
//line parse.go:12683
		switch ( s)[p] {
		case 69:
			goto st189
		case 101:
			goto st189
		}
		goto st0
	st189:
		if p++; p == pe {
			goto _test_eof189
		}
	st_case_189:
		switch ( s)[p] {
		case 68:
			goto tr381
		case 100:
			goto tr381
		}
		goto st0
tr337:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st190
tr383:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st190
tr397:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st190
tr402:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:548
d=m
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st190
tr408:
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st190
tr433:
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st190
	st190:
		if p++; p == pe {
			goto _test_eof190
		}
	st_case_190:
//line parse.go:12993
		switch ( s)[p] {
		case 42:
			goto tr326
		case 65:
			goto tr328
		case 68:
			goto tr329
		case 70:
			goto tr330
		case 74:
			goto tr331
		case 77:
			goto tr332
		case 78:
			goto tr333
		case 79:
			goto tr334
		case 83:
			goto tr335
		case 97:
			goto tr328
		case 100:
			goto tr329
		case 102:
			goto tr330
		case 106:
			goto tr331
		case 109:
			goto tr332
		case 110:
			goto tr333
		case 111:
			goto tr334
		case 115:
			goto tr335
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr327
		}
		goto st0
tr327:
//line parse.rl:547
d=0;
//line parse.rl:40

            mark = p;
        
	goto st191
	st191:
		if p++; p == pe {
			goto _test_eof191
		}
	st_case_191:
//line parse.go:13047
		switch ( s)[p] {
		case 32:
			goto tr382
		case 44:
			goto tr383
		case 45:
			goto tr384
		case 47:
			goto tr385
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st191
			}
		case ( s)[p] >= 9:
			goto tr382
		}
		goto st0
tr384:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st192
tr434:
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st192
	st192:
		if p++; p == pe {
			goto _test_eof192
		}
	st_case_192:
//line parse.go:13087
		switch ( s)[p] {
		case 65:
			goto st196
		case 68:
			goto st200
		case 70:
			goto st202
		case 74:
			goto st204
		case 77:
			goto st207
		case 78:
			goto st209
		case 79:
			goto st211
		case 83:
			goto st213
		case 97:
			goto st196
		case 100:
			goto st200
		case 102:
			goto st202
		case 106:
			goto st204
		case 109:
			goto st207
		case 110:
			goto st209
		case 111:
			goto st211
		case 115:
			goto st213
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr387
		}
		goto st0
tr387:
//line parse.rl:40

            mark = p;
        
	goto st193
	st193:
		if p++; p == pe {
			goto _test_eof193
		}
	st_case_193:
//line parse.go:13137
		switch ( s)[p] {
		case 32:
			goto tr396
		case 44:
			goto tr397
		case 47:
			goto tr398
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st193
			}
		case ( s)[p] >= 9:
			goto tr396
		}
		goto st0
tr338:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
	goto st194
tr385:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st194
tr398:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
	goto st194
tr409:
//line parse.rl:547
 end=m-1; d=1;
	goto st194
tr435:
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st194
	st194:
		if p++; p == pe {
			goto _test_eof194
		}
	st_case_194:
//line parse.go:13194
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr400
		}
		goto st0
tr400:
//line parse.rl:40

            mark = p;
        
	goto st195
	st195:
		if p++; p == pe {
			goto _test_eof195
		}
	st_case_195:
//line parse.go:13210
		switch ( s)[p] {
		case 32:
			goto tr401
		case 44:
			goto tr402
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st195
			}
		case ( s)[p] >= 9:
			goto tr401
		}
		goto st0
	st196:
		if p++; p == pe {
			goto _test_eof196
		}
	st_case_196:
		switch ( s)[p] {
		case 80:
			goto st197
		case 85:
			goto st199
		case 112:
			goto st197
		case 117:
			goto st199
		}
		goto st0
	st197:
		if p++; p == pe {
			goto _test_eof197
		}
	st_case_197:
		switch ( s)[p] {
		case 82:
			goto tr406
		case 114:
			goto tr406
		}
		goto st0
tr406:
//line parse.rl:519
m=4
	goto st198
tr410:
//line parse.rl:519
m=8
	goto st198
tr412:
//line parse.rl:519
m=12
	goto st198
tr414:
//line parse.rl:519
m=2
	goto st198
tr417:
//line parse.rl:519
m=1
	goto st198
tr418:
//line parse.rl:519
m=7
	goto st198
tr419:
//line parse.rl:519
m=6
	goto st198
tr421:
//line parse.rl:519
m=3
	goto st198
tr422:
//line parse.rl:519
m=5
	goto st198
tr424:
//line parse.rl:519
m=11
	goto st198
tr426:
//line parse.rl:519
m=10
	goto st198
tr428:
//line parse.rl:519
m=9
	goto st198
	st198:
		if p++; p == pe {
			goto _test_eof198
		}
	st_case_198:
//line parse.go:13307
		switch ( s)[p] {
		case 32:
			goto tr407
		case 44:
			goto tr408
		case 47:
			goto tr409
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr407
		}
		goto st0
	st199:
		if p++; p == pe {
			goto _test_eof199
		}
	st_case_199:
		switch ( s)[p] {
		case 71:
			goto tr410
		case 103:
			goto tr410
		}
		goto st0
	st200:
		if p++; p == pe {
			goto _test_eof200
		}
	st_case_200:
		switch ( s)[p] {
		case 69:
			goto st201
		case 101:
			goto st201
		}
		goto st0
	st201:
		if p++; p == pe {
			goto _test_eof201
		}
	st_case_201:
		switch ( s)[p] {
		case 67:
			goto tr412
		case 99:
			goto tr412
		}
		goto st0
	st202:
		if p++; p == pe {
			goto _test_eof202
		}
	st_case_202:
		switch ( s)[p] {
		case 69:
			goto st203
		case 101:
			goto st203
		}
		goto st0
	st203:
		if p++; p == pe {
			goto _test_eof203
		}
	st_case_203:
		switch ( s)[p] {
		case 66:
			goto tr414
		case 98:
			goto tr414
		}
		goto st0
	st204:
		if p++; p == pe {
			goto _test_eof204
		}
	st_case_204:
		switch ( s)[p] {
		case 65:
			goto st205
		case 85:
			goto st206
		case 97:
			goto st205
		case 117:
			goto st206
		}
		goto st0
	st205:
		if p++; p == pe {
			goto _test_eof205
		}
	st_case_205:
		switch ( s)[p] {
		case 78:
			goto tr417
		case 110:
			goto tr417
		}
		goto st0
	st206:
		if p++; p == pe {
			goto _test_eof206
		}
	st_case_206:
		switch ( s)[p] {
		case 76:
			goto tr418
		case 78:
			goto tr419
		case 108:
			goto tr418
		case 110:
			goto tr419
		}
		goto st0
	st207:
		if p++; p == pe {
			goto _test_eof207
		}
	st_case_207:
		switch ( s)[p] {
		case 65:
			goto st208
		case 97:
			goto st208
		}
		goto st0
	st208:
		if p++; p == pe {
			goto _test_eof208
		}
	st_case_208:
		switch ( s)[p] {
		case 82:
			goto tr421
		case 89:
			goto tr422
		case 114:
			goto tr421
		case 121:
			goto tr422
		}
		goto st0
	st209:
		if p++; p == pe {
			goto _test_eof209
		}
	st_case_209:
		switch ( s)[p] {
		case 79:
			goto st210
		case 111:
			goto st210
		}
		goto st0
	st210:
		if p++; p == pe {
			goto _test_eof210
		}
	st_case_210:
		switch ( s)[p] {
		case 86:
			goto tr424
		case 118:
			goto tr424
		}
		goto st0
	st211:
		if p++; p == pe {
			goto _test_eof211
		}
	st_case_211:
		switch ( s)[p] {
		case 67:
			goto st212
		case 99:
			goto st212
		}
		goto st0
	st212:
		if p++; p == pe {
			goto _test_eof212
		}
	st_case_212:
		switch ( s)[p] {
		case 84:
			goto tr426
		case 116:
			goto tr426
		}
		goto st0
	st213:
		if p++; p == pe {
			goto _test_eof213
		}
	st_case_213:
		switch ( s)[p] {
		case 69:
			goto st214
		case 101:
			goto st214
		}
		goto st0
	st214:
		if p++; p == pe {
			goto _test_eof214
		}
	st_case_214:
		switch ( s)[p] {
		case 80:
			goto tr428
		case 112:
			goto tr428
		}
		goto st0
tr328:
//line parse.rl:547
d=0;
	goto st215
	st215:
		if p++; p == pe {
			goto _test_eof215
		}
	st_case_215:
//line parse.go:13533
		switch ( s)[p] {
		case 80:
			goto st216
		case 85:
			goto st218
		case 112:
			goto st216
		case 117:
			goto st218
		}
		goto st0
	st216:
		if p++; p == pe {
			goto _test_eof216
		}
	st_case_216:
		switch ( s)[p] {
		case 82:
			goto tr431
		case 114:
			goto tr431
		}
		goto st0
tr431:
//line parse.rl:519
m=4
	goto st217
tr436:
//line parse.rl:519
m=8
	goto st217
tr438:
//line parse.rl:519
m=12
	goto st217
tr440:
//line parse.rl:519
m=2
	goto st217
tr443:
//line parse.rl:519
m=1
	goto st217
tr444:
//line parse.rl:519
m=7
	goto st217
tr445:
//line parse.rl:519
m=6
	goto st217
tr447:
//line parse.rl:519
m=3
	goto st217
tr448:
//line parse.rl:519
m=5
	goto st217
tr450:
//line parse.rl:519
m=11
	goto st217
tr452:
//line parse.rl:519
m=10
	goto st217
tr454:
//line parse.rl:519
m=9
	goto st217
	st217:
		if p++; p == pe {
			goto _test_eof217
		}
	st_case_217:
//line parse.go:13610
		switch ( s)[p] {
		case 32:
			goto tr432
		case 44:
			goto tr433
		case 45:
			goto tr434
		case 47:
			goto tr435
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr432
		}
		goto st0
	st218:
		if p++; p == pe {
			goto _test_eof218
		}
	st_case_218:
		switch ( s)[p] {
		case 71:
			goto tr436
		case 103:
			goto tr436
		}
		goto st0
tr329:
//line parse.rl:547
d=0;
	goto st219
	st219:
		if p++; p == pe {
			goto _test_eof219
		}
	st_case_219:
//line parse.go:13646
		switch ( s)[p] {
		case 69:
			goto st220
		case 101:
			goto st220
		}
		goto st0
	st220:
		if p++; p == pe {
			goto _test_eof220
		}
	st_case_220:
		switch ( s)[p] {
		case 67:
			goto tr438
		case 99:
			goto tr438
		}
		goto st0
tr330:
//line parse.rl:547
d=0;
	goto st221
	st221:
		if p++; p == pe {
			goto _test_eof221
		}
	st_case_221:
//line parse.go:13675
		switch ( s)[p] {
		case 69:
			goto st222
		case 101:
			goto st222
		}
		goto st0
	st222:
		if p++; p == pe {
			goto _test_eof222
		}
	st_case_222:
		switch ( s)[p] {
		case 66:
			goto tr440
		case 98:
			goto tr440
		}
		goto st0
tr331:
//line parse.rl:547
d=0;
	goto st223
	st223:
		if p++; p == pe {
			goto _test_eof223
		}
	st_case_223:
//line parse.go:13704
		switch ( s)[p] {
		case 65:
			goto st224
		case 85:
			goto st225
		case 97:
			goto st224
		case 117:
			goto st225
		}
		goto st0
	st224:
		if p++; p == pe {
			goto _test_eof224
		}
	st_case_224:
		switch ( s)[p] {
		case 78:
			goto tr443
		case 110:
			goto tr443
		}
		goto st0
	st225:
		if p++; p == pe {
			goto _test_eof225
		}
	st_case_225:
		switch ( s)[p] {
		case 76:
			goto tr444
		case 78:
			goto tr445
		case 108:
			goto tr444
		case 110:
			goto tr445
		}
		goto st0
tr332:
//line parse.rl:547
d=0;
	goto st226
	st226:
		if p++; p == pe {
			goto _test_eof226
		}
	st_case_226:
//line parse.go:13753
		switch ( s)[p] {
		case 65:
			goto st227
		case 97:
			goto st227
		}
		goto st0
	st227:
		if p++; p == pe {
			goto _test_eof227
		}
	st_case_227:
		switch ( s)[p] {
		case 82:
			goto tr447
		case 89:
			goto tr448
		case 114:
			goto tr447
		case 121:
			goto tr448
		}
		goto st0
tr333:
//line parse.rl:547
d=0;
	goto st228
	st228:
		if p++; p == pe {
			goto _test_eof228
		}
	st_case_228:
//line parse.go:13786
		switch ( s)[p] {
		case 79:
			goto st229
		case 111:
			goto st229
		}
		goto st0
	st229:
		if p++; p == pe {
			goto _test_eof229
		}
	st_case_229:
		switch ( s)[p] {
		case 86:
			goto tr450
		case 118:
			goto tr450
		}
		goto st0
tr334:
//line parse.rl:547
d=0;
	goto st230
	st230:
		if p++; p == pe {
			goto _test_eof230
		}
	st_case_230:
//line parse.go:13815
		switch ( s)[p] {
		case 67:
			goto st231
		case 99:
			goto st231
		}
		goto st0
	st231:
		if p++; p == pe {
			goto _test_eof231
		}
	st_case_231:
		switch ( s)[p] {
		case 84:
			goto tr452
		case 116:
			goto tr452
		}
		goto st0
tr335:
//line parse.rl:547
d=0;
	goto st232
	st232:
		if p++; p == pe {
			goto _test_eof232
		}
	st_case_232:
//line parse.go:13844
		switch ( s)[p] {
		case 69:
			goto st233
		case 101:
			goto st233
		}
		goto st0
	st233:
		if p++; p == pe {
			goto _test_eof233
		}
	st_case_233:
		switch ( s)[p] {
		case 80:
			goto tr454
		case 112:
			goto tr454
		}
		goto st0
tr323:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st234
tr456:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st234
tr467:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st234
tr472:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:544
d=m
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st234
tr477:
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st234
tr494:
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st234
	st234:
		if p++; p == pe {
			goto _test_eof234
		}
	st_case_234:
//line parse.go:14268
		switch ( s)[p] {
		case 42:
			goto tr315
		case 70:
			goto tr317
		case 77:
			goto tr318
		case 83:
			goto tr319
		case 84:
			goto tr320
		case 87:
			goto tr321
		case 102:
			goto tr317
		case 109:
			goto tr318
		case 115:
			goto tr319
		case 116:
			goto tr320
		case 119:
			goto tr321
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr316
		}
		goto st0
tr316:
//line parse.rl:543
d=0;
//line parse.rl:40

            mark = p;
        
	goto st235
	st235:
		if p++; p == pe {
			goto _test_eof235
		}
	st_case_235:
//line parse.go:14310
		switch ( s)[p] {
		case 32:
			goto tr455
		case 44:
			goto tr456
		case 45:
			goto tr457
		case 47:
			goto tr458
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st235
			}
		case ( s)[p] >= 9:
			goto tr455
		}
		goto st0
tr457:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st236
tr495:
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st236
	st236:
		if p++; p == pe {
			goto _test_eof236
		}
	st_case_236:
//line parse.go:14350
		switch ( s)[p] {
		case 70:
			goto st240
		case 77:
			goto st243
		case 83:
			goto st245
		case 84:
			goto st248
		case 87:
			goto st251
		case 102:
			goto st240
		case 109:
			goto st243
		case 115:
			goto st245
		case 116:
			goto st248
		case 119:
			goto st251
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr460
		}
		goto st0
tr460:
//line parse.rl:40

            mark = p;
        
	goto st237
	st237:
		if p++; p == pe {
			goto _test_eof237
		}
	st_case_237:
//line parse.go:14388
		switch ( s)[p] {
		case 32:
			goto tr466
		case 44:
			goto tr467
		case 47:
			goto tr468
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st237
			}
		case ( s)[p] >= 9:
			goto tr466
		}
		goto st0
tr324:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
	goto st238
tr458:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st238
tr468:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
	goto st238
tr478:
//line parse.rl:543
 end=m-1; d=1;
	goto st238
tr496:
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st238
	st238:
		if p++; p == pe {
			goto _test_eof238
		}
	st_case_238:
//line parse.go:14445
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr470
		}
		goto st0
tr470:
//line parse.rl:40

            mark = p;
        
	goto st239
	st239:
		if p++; p == pe {
			goto _test_eof239
		}
	st_case_239:
//line parse.go:14461
		switch ( s)[p] {
		case 32:
			goto tr471
		case 44:
			goto tr472
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st239
			}
		case ( s)[p] >= 9:
			goto tr471
		}
		goto st0
	st240:
		if p++; p == pe {
			goto _test_eof240
		}
	st_case_240:
		switch ( s)[p] {
		case 82:
			goto st241
		case 114:
			goto st241
		}
		goto st0
	st241:
		if p++; p == pe {
			goto _test_eof241
		}
	st_case_241:
		switch ( s)[p] {
		case 73:
			goto tr475
		case 105:
			goto tr475
		}
		goto st0
tr475:
//line parse.rl:518
m=5
	goto st242
tr480:
//line parse.rl:518
m=1
	goto st242
tr483:
//line parse.rl:518
m=6
	goto st242
tr484:
//line parse.rl:518
m=0
	goto st242
tr487:
//line parse.rl:518
m=4
	goto st242
tr488:
//line parse.rl:518
m=2
	goto st242
tr490:
//line parse.rl:518
m=3
	goto st242
	st242:
		if p++; p == pe {
			goto _test_eof242
		}
	st_case_242:
//line parse.go:14534
		switch ( s)[p] {
		case 32:
			goto tr476
		case 44:
			goto tr477
		case 47:
			goto tr478
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr476
		}
		goto st0
	st243:
		if p++; p == pe {
			goto _test_eof243
		}
	st_case_243:
		switch ( s)[p] {
		case 79:
			goto st244
		case 111:
			goto st244
		}
		goto st0
	st244:
		if p++; p == pe {
			goto _test_eof244
		}
	st_case_244:
		switch ( s)[p] {
		case 78:
			goto tr480
		case 110:
			goto tr480
		}
		goto st0
	st245:
		if p++; p == pe {
			goto _test_eof245
		}
	st_case_245:
		switch ( s)[p] {
		case 65:
			goto st246
		case 85:
			goto st247
		case 97:
			goto st246
		case 117:
			goto st247
		}
		goto st0
	st246:
		if p++; p == pe {
			goto _test_eof246
		}
	st_case_246:
		switch ( s)[p] {
		case 84:
			goto tr483
		case 116:
			goto tr483
		}
		goto st0
	st247:
		if p++; p == pe {
			goto _test_eof247
		}
	st_case_247:
		switch ( s)[p] {
		case 78:
			goto tr484
		case 110:
			goto tr484
		}
		goto st0
	st248:
		if p++; p == pe {
			goto _test_eof248
		}
	st_case_248:
		switch ( s)[p] {
		case 72:
			goto st249
		case 85:
			goto st250
		case 104:
			goto st249
		case 117:
			goto st250
		}
		goto st0
	st249:
		if p++; p == pe {
			goto _test_eof249
		}
	st_case_249:
		switch ( s)[p] {
		case 85:
			goto tr487
		case 117:
			goto tr487
		}
		goto st0
	st250:
		if p++; p == pe {
			goto _test_eof250
		}
	st_case_250:
		switch ( s)[p] {
		case 69:
			goto tr488
		case 101:
			goto tr488
		}
		goto st0
	st251:
		if p++; p == pe {
			goto _test_eof251
		}
	st_case_251:
		switch ( s)[p] {
		case 69:
			goto st252
		case 101:
			goto st252
		}
		goto st0
	st252:
		if p++; p == pe {
			goto _test_eof252
		}
	st_case_252:
		switch ( s)[p] {
		case 68:
			goto tr490
		case 100:
			goto tr490
		}
		goto st0
tr317:
//line parse.rl:543
d=0;
	goto st253
	st253:
		if p++; p == pe {
			goto _test_eof253
		}
	st_case_253:
//line parse.go:14684
		switch ( s)[p] {
		case 82:
			goto st254
		case 114:
			goto st254
		}
		goto st0
	st254:
		if p++; p == pe {
			goto _test_eof254
		}
	st_case_254:
		switch ( s)[p] {
		case 73:
			goto tr492
		case 105:
			goto tr492
		}
		goto st0
tr492:
//line parse.rl:518
m=5
	goto st255
tr498:
//line parse.rl:518
m=1
	goto st255
tr501:
//line parse.rl:518
m=6
	goto st255
tr502:
//line parse.rl:518
m=0
	goto st255
tr505:
//line parse.rl:518
m=4
	goto st255
tr506:
//line parse.rl:518
m=2
	goto st255
tr508:
//line parse.rl:518
m=3
	goto st255
	st255:
		if p++; p == pe {
			goto _test_eof255
		}
	st_case_255:
//line parse.go:14737
		switch ( s)[p] {
		case 32:
			goto tr493
		case 44:
			goto tr494
		case 45:
			goto tr495
		case 47:
			goto tr496
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr493
		}
		goto st0
tr318:
//line parse.rl:543
d=0;
	goto st256
	st256:
		if p++; p == pe {
			goto _test_eof256
		}
	st_case_256:
//line parse.go:14761
		switch ( s)[p] {
		case 79:
			goto st257
		case 111:
			goto st257
		}
		goto st0
	st257:
		if p++; p == pe {
			goto _test_eof257
		}
	st_case_257:
		switch ( s)[p] {
		case 78:
			goto tr498
		case 110:
			goto tr498
		}
		goto st0
tr319:
//line parse.rl:543
d=0;
	goto st258
	st258:
		if p++; p == pe {
			goto _test_eof258
		}
	st_case_258:
//line parse.go:14790
		switch ( s)[p] {
		case 65:
			goto st259
		case 85:
			goto st260
		case 97:
			goto st259
		case 117:
			goto st260
		}
		goto st0
	st259:
		if p++; p == pe {
			goto _test_eof259
		}
	st_case_259:
		switch ( s)[p] {
		case 84:
			goto tr501
		case 116:
			goto tr501
		}
		goto st0
	st260:
		if p++; p == pe {
			goto _test_eof260
		}
	st_case_260:
		switch ( s)[p] {
		case 78:
			goto tr502
		case 110:
			goto tr502
		}
		goto st0
tr320:
//line parse.rl:543
d=0;
	goto st261
	st261:
		if p++; p == pe {
			goto _test_eof261
		}
	st_case_261:
//line parse.go:14835
		switch ( s)[p] {
		case 72:
			goto st262
		case 85:
			goto st263
		case 104:
			goto st262
		case 117:
			goto st263
		}
		goto st0
	st262:
		if p++; p == pe {
			goto _test_eof262
		}
	st_case_262:
		switch ( s)[p] {
		case 85:
			goto tr505
		case 117:
			goto tr505
		}
		goto st0
	st263:
		if p++; p == pe {
			goto _test_eof263
		}
	st_case_263:
		switch ( s)[p] {
		case 69:
			goto tr506
		case 101:
			goto tr506
		}
		goto st0
tr321:
//line parse.rl:543
d=0;
	goto st264
	st264:
		if p++; p == pe {
			goto _test_eof264
		}
	st_case_264:
//line parse.go:14880
		switch ( s)[p] {
		case 69:
			goto st265
		case 101:
			goto st265
		}
		goto st0
	st265:
		if p++; p == pe {
			goto _test_eof265
		}
	st_case_265:
		switch ( s)[p] {
		case 68:
			goto tr508
		case 100:
			goto tr508
		}
		goto st0
tr312:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st266
tr510:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st266
tr516:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st266
tr521:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:538
d=m
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st266
	st266:
		if p++; p == pe {
			goto _test_eof266
		}
	st_case_266:
//line parse.go:15142
		if ( s)[p] == 42 {
			goto tr309
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr310
		}
		goto st0
tr310:
//line parse.rl:537
d=0;
//line parse.rl:40

            mark = p;
        
	goto st267
	st267:
		if p++; p == pe {
			goto _test_eof267
		}
	st_case_267:
//line parse.go:15163
		switch ( s)[p] {
		case 32:
			goto tr509
		case 44:
			goto tr510
		case 45:
			goto tr511
		case 47:
			goto tr512
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st267
			}
		case ( s)[p] >= 9:
			goto tr509
		}
		goto st0
tr511:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
	goto st268
	st268:
		if p++; p == pe {
			goto _test_eof268
		}
	st_case_268:
//line parse.go:15199
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr514
		}
		goto st0
tr514:
//line parse.rl:40

            mark = p;
        
	goto st269
	st269:
		if p++; p == pe {
			goto _test_eof269
		}
	st_case_269:
//line parse.go:15215
		switch ( s)[p] {
		case 32:
			goto tr515
		case 44:
			goto tr516
		case 47:
			goto tr517
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st269
			}
		case ( s)[p] >= 9:
			goto tr515
		}
		goto st0
tr313:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
	goto st270
tr512:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
	goto st270
tr517:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
	goto st270
	st270:
		if p++; p == pe {
			goto _test_eof270
		}
	st_case_270:
//line parse.go:15264
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr519
		}
		goto st0
tr519:
//line parse.rl:40

            mark = p;
        
	goto st271
	st271:
		if p++; p == pe {
			goto _test_eof271
		}
	st_case_271:
//line parse.go:15280
		switch ( s)[p] {
		case 32:
			goto tr520
		case 44:
			goto tr521
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st271
			}
		case ( s)[p] >= 9:
			goto tr520
		}
		goto st0
tr306:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st272
tr524:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st272
tr530:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st272
tr535:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:534
d=m
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st272
	st272:
		if p++; p == pe {
			goto _test_eof272
		}
	st_case_272:
//line parse.go:15686
		if ( s)[p] == 42 {
			goto tr303
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr304
		}
		goto st0
tr304:
//line parse.rl:530
d=0;
//line parse.rl:40

            mark = p;
        
	goto st273
	st273:
		if p++; p == pe {
			goto _test_eof273
		}
	st_case_273:
//line parse.go:15707
		switch ( s)[p] {
		case 32:
			goto tr523
		case 44:
			goto tr524
		case 45:
			goto tr525
		case 47:
			goto tr526
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st273
			}
		case ( s)[p] >= 9:
			goto tr523
		}
		goto st0
tr525:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st274
	st274:
		if p++; p == pe {
			goto _test_eof274
		}
	st_case_274:
//line parse.go:15743
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr528
		}
		goto st0
tr528:
//line parse.rl:40

            mark = p;
        
	goto st275
	st275:
		if p++; p == pe {
			goto _test_eof275
		}
	st_case_275:
//line parse.go:15759
		switch ( s)[p] {
		case 32:
			goto tr529
		case 44:
			goto tr530
		case 47:
			goto tr531
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st275
			}
		case ( s)[p] >= 9:
			goto tr529
		}
		goto st0
tr307:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
	goto st276
tr526:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st276
tr531:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
	goto st276
	st276:
		if p++; p == pe {
			goto _test_eof276
		}
	st_case_276:
//line parse.go:15808
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr533
		}
		goto st0
tr533:
//line parse.rl:40

            mark = p;
        
	goto st277
	st277:
		if p++; p == pe {
			goto _test_eof277
		}
	st_case_277:
//line parse.go:15824
		switch ( s)[p] {
		case 32:
			goto tr534
		case 44:
			goto tr535
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st277
			}
		case ( s)[p] >= 9:
			goto tr534
		}
		goto st0
tr301:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
	goto st278
tr544:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st278
tr549:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
	goto st278
	st278:
		if p++; p == pe {
			goto _test_eof278
		}
	st_case_278:
//line parse.go:15871
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr537
		}
		goto st0
tr537:
//line parse.rl:40

            mark = p;
        
	goto st279
	st279:
		if p++; p == pe {
			goto _test_eof279
		}
	st_case_279:
//line parse.go:15887
		switch ( s)[p] {
		case 32:
			goto tr538
		case 44:
			goto tr539
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st279
			}
		case ( s)[p] >= 9:
			goto tr538
		}
		goto st0
tr298:
//line parse.rl:530
d=0;
//line parse.rl:40

            mark = p;
        
	goto st280
	st280:
		if p++; p == pe {
			goto _test_eof280
		}
	st_case_280:
//line parse.go:15916
		switch ( s)[p] {
		case 32:
			goto tr541
		case 44:
			goto tr542
		case 45:
			goto tr543
		case 47:
			goto tr544
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st280
			}
		case ( s)[p] >= 9:
			goto tr541
		}
		goto st0
tr543:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st281
	st281:
		if p++; p == pe {
			goto _test_eof281
		}
	st_case_281:
//line parse.go:15952
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr546
		}
		goto st0
tr546:
//line parse.rl:40

            mark = p;
        
	goto st282
	st282:
		if p++; p == pe {
			goto _test_eof282
		}
	st_case_282:
//line parse.go:15968
		switch ( s)[p] {
		case 32:
			goto tr547
		case 44:
			goto tr548
		case 47:
			goto tr549
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st282
			}
		case ( s)[p] >= 9:
			goto tr547
		}
		goto st0
tr554:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st283
tr776:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st283
tr782:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st283
tr773:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:534
d=m
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st283
	st283:
//line NONE:1
ts = 0

		if p++; p == pe {
			goto _test_eof283
		}
	st_case_283:
//line parse.go:16379
		if ( s)[p] == 42 {
			goto tr551
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr552
		}
		goto st0
tr551:
//line parse.rl:530
d=0;
	goto st284
	st284:
		if p++; p == pe {
			goto _test_eof284
		}
	st_case_284:
//line parse.go:16396
		switch ( s)[p] {
		case 32:
			goto tr553
		case 44:
			goto tr554
		case 47:
			goto tr555
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr553
		}
		goto st0
tr553:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st285
tr775:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st285
tr781:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st285
tr772:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:534
d=m
//line parse.rl:186

            {
                // I really wish that golang had a binary bit representation, this is pretty aweful, but easier to understand than using hex or octal I guess
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30|1<<31|1<<32|1<<33|1<<34|1<<35|1<<36|1<<37|1<<38|1<<39|1<<40|1<<41|1<<42|1<<43|1<<44|1<<45|1<<46|1<<47|1<<48|1<<49|1<<50|1<<51|1<<52|1<<53|1<<54|1<<55|1<<56|1<<57|1<<58|1<<59,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22|1<<24|1<<26|1<<28|1<<30|1<<32|1<<34|1<<36|1<<38|1<<40|1<<42|1<<44|1<<46|1<<48|1<<50|1<<52|1<<54|1<<56|1<<58,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21|1<<24|1<<27|1<<30|1<<33|1<<36|1<<39|1<<42|1<<45|1<<48|1<<51|1<<54|1<<57,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20|1<<24|1<<28|1<<32|1<<36|1<<40|1<<44|1<<48|1<<52|1<<56,
                    1|1<<5|1<<10|1<<15|1<<20|1<<25|1<<30|1<<35|1<<40|1<<45|1<<50|1<<55,
                    1|1<<6|1<<12|1<<18|1<<24|1<<30|1<<36|1<<42|1<<48|1<<54,
                    1|1<<7|1<<14|1<<21|1<<28|1<<35|1<<42|1<<49|1<<56,
                    1|1<<8|1<<16|1<<24|1<<32|1<<40|1<<48|1<<56,
                    1|1<<9|1<<18|1<<27|1<<36|1<<45|1<<54,
                    1|1<<10|1<<20|1<<30|1<<40|1<<50,
                    1|1<<11|1<<22|1<<33|1<<44|1<<55,
                    1|1<<12|1<<24|1<<36|1<<48,
                    1|1<<13|1<<26|1<<39|1<<52,
                    1|1<<14|1<<28|1<<42|1<<56,
                    1|1<<15|1<<30|1<<45,
                    1|1<<16|1<<32|1<<48,
                    1|1<<17|1<<34|1<<51,
                    1|1<<18|1<<36|1<<54,
                    1|1<<19|1<<38|1<<57,
                    1|1<<20|1<<40,
                    1|1<<21|1<<42,
                    1|1<<22|1<<44,
                    1|1<<23|1<<46,
                    1|1<<24|1<<48,
                    1|1<<25|1<<50,
                    1|1<<26|1<<52,
                    1|1<<27|1<<54,
                    1|1<<28|1<<56,
                    1|1<<29|1<<58,
                    1|1<<30,
                    1|1<<31,
                    1|1<<32,
                    1|1<<33,
                    1|1<<34,
                    1|1<<35,
                    1|1<<36,
                    1|1<<37,
                    1|1<<38,
                    1|1<<39,
                    1|1<<40,
                    1|1<<41,
                    1|1<<42,
                    1|1<<43,
                    1|1<<44,
                    1|1<<45,
                    1|1<<46,
                    1|1<<47,
                    1|1<<48,
                    1|1<<49,
                    1|1<<50,
                    1|1<<51,
                    1|1<<52,
                    1|1<<53,
                    1|1<<54,
                    1|1<<55,
                    1|1<<56,
                    1|1<<57,
                    1|1<<58,
                    1|1<<59,
                }
                if d>=60 {
                    return nt, fmt.Errorf("invalid second */%d", d)
                }
                if start>=60 {
                    return nt, fmt.Errorf("invalid start second %d", start)
                }
                if end>=60 {
                    return nt, fmt.Errorf("invalid end second %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.minute |= 1<<m
                }else{
                    nt.minute |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st285
	st285:
		if p++; p == pe {
			goto _test_eof285
		}
	st_case_285:
//line parse.go:16799
		switch ( s)[p] {
		case 32:
			goto st285
		case 42:
			goto tr557
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr558
			}
		case ( s)[p] >= 9:
			goto st285
		}
		goto st0
tr557:
//line parse.rl:537
d=0;
	goto st286
	st286:
		if p++; p == pe {
			goto _test_eof286
		}
	st_case_286:
//line parse.go:16824
		switch ( s)[p] {
		case 32:
			goto tr559
		case 44:
			goto tr560
		case 47:
			goto tr561
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr559
		}
		goto st0
tr559:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st287
tr757:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st287
tr763:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st287
tr768:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:538
d=m
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st287
	st287:
		if p++; p == pe {
			goto _test_eof287
		}
	st_case_287:
//line parse.go:17079
		switch ( s)[p] {
		case 32:
			goto st287
		case 42:
			goto tr563
		case 70:
			goto tr565
		case 77:
			goto tr566
		case 83:
			goto tr567
		case 84:
			goto tr568
		case 87:
			goto tr569
		case 102:
			goto tr565
		case 109:
			goto tr566
		case 115:
			goto tr567
		case 116:
			goto tr568
		case 119:
			goto tr569
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr564
			}
		case ( s)[p] >= 9:
			goto st287
		}
		goto st0
tr563:
//line parse.rl:543
d=0;
	goto st288
	st288:
		if p++; p == pe {
			goto _test_eof288
		}
	st_case_288:
//line parse.go:17124
		switch ( s)[p] {
		case 32:
			goto tr570
		case 44:
			goto tr571
		case 47:
			goto tr572
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr570
		}
		goto st0
tr570:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st289
tr703:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st289
tr714:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st289
tr719:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:544
d=m
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st289
tr724:
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st289
tr741:
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st289
	st289:
		if p++; p == pe {
			goto _test_eof289
		}
	st_case_289:
//line parse.go:17541
		switch ( s)[p] {
		case 32:
			goto st289
		case 42:
			goto tr574
		case 65:
			goto tr576
		case 68:
			goto tr577
		case 70:
			goto tr578
		case 74:
			goto tr579
		case 77:
			goto tr580
		case 78:
			goto tr581
		case 79:
			goto tr582
		case 83:
			goto tr583
		case 97:
			goto tr576
		case 100:
			goto tr577
		case 102:
			goto tr578
		case 106:
			goto tr579
		case 109:
			goto tr580
		case 110:
			goto tr581
		case 111:
			goto tr582
		case 115:
			goto tr583
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr575
			}
		case ( s)[p] >= 9:
			goto st289
		}
		goto st0
tr574:
//line parse.rl:547
d=0;
	goto st290
	st290:
		if p++; p == pe {
			goto _test_eof290
		}
	st_case_290:
//line parse.go:17598
		switch ( s)[p] {
		case 32:
			goto tr584
		case 44:
			goto tr585
		case 47:
			goto tr586
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr584
		}
		goto st0
tr584:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st291
tr630:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st291
tr644:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st291
tr649:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:548
d=m
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st291
tr655:
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st291
tr680:
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st291
	st291:
		if p++; p == pe {
			goto _test_eof291
		}
	st_case_291:
//line parse.go:17901
		switch ( s)[p] {
		case 32:
			goto st291
		case 42:
			goto tr588
		case 70:
			goto tr590
		case 77:
			goto tr591
		case 83:
			goto tr592
		case 84:
			goto tr593
		case 87:
			goto tr594
		case 102:
			goto tr590
		case 109:
			goto tr591
		case 115:
			goto tr592
		case 116:
			goto tr593
		case 119:
			goto tr594
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto tr589
			}
		case ( s)[p] >= 9:
			goto st291
		}
		goto st0
tr588:
//line parse.rl:551
d=0;
	goto st423
	st423:
		if p++; p == pe {
			goto _test_eof423
		}
	st_case_423:
//line parse.go:17946
		switch ( s)[p] {
		case 32:
			goto tr830
		case 44:
			goto tr831
		case 47:
			goto tr832
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr830
		}
		goto st0
tr830:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st424
tr834:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st424
tr839:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st424
tr843:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:552
d=m
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st424
tr846:
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st424
tr849:
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st424
	st424:
		if p++; p == pe {
			goto _test_eof424
		}
	st_case_424:
//line parse.go:18303
		if ( s)[p] == 32 {
			goto st424
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto st424
		}
		goto st0
tr831:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st292
tr835:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st292
tr840:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st292
tr844:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:552
d=m
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st292
tr847:
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st292
tr850:
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
	goto st292
	st292:
		if p++; p == pe {
			goto _test_eof292
		}
	st_case_292:
//line parse.go:18655
		switch ( s)[p] {
		case 42:
			goto tr588
		case 70:
			goto tr590
		case 77:
			goto tr591
		case 83:
			goto tr592
		case 84:
			goto tr593
		case 87:
			goto tr594
		case 102:
			goto tr590
		case 109:
			goto tr591
		case 115:
			goto tr592
		case 116:
			goto tr593
		case 119:
			goto tr594
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr589
		}
		goto st0
tr589:
//line parse.rl:551
d=0;
//line parse.rl:40

            mark = p;
        
	goto st425
	st425:
		if p++; p == pe {
			goto _test_eof425
		}
	st_case_425:
//line parse.go:18697
		switch ( s)[p] {
		case 32:
			goto tr834
		case 44:
			goto tr835
		case 45:
			goto tr836
		case 47:
			goto tr837
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st425
			}
		case ( s)[p] >= 9:
			goto tr834
		}
		goto st0
tr836:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
	goto st293
tr851:
//line parse.rl:551
 start=m; end=6;d=0;
	goto st293
	st293:
		if p++; p == pe {
			goto _test_eof293
		}
	st_case_293:
//line parse.go:18737
		switch ( s)[p] {
		case 70:
			goto st295
		case 77:
			goto st297
		case 83:
			goto st299
		case 84:
			goto st302
		case 87:
			goto st305
		case 102:
			goto st295
		case 109:
			goto st297
		case 115:
			goto st299
		case 116:
			goto st302
		case 119:
			goto st305
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr595
		}
		goto st0
tr595:
//line parse.rl:40

            mark = p;
        
	goto st426
	st426:
		if p++; p == pe {
			goto _test_eof426
		}
	st_case_426:
//line parse.go:18775
		switch ( s)[p] {
		case 32:
			goto tr839
		case 44:
			goto tr840
		case 47:
			goto tr841
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st426
			}
		case ( s)[p] >= 9:
			goto tr839
		}
		goto st0
tr832:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
	goto st294
tr837:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
	goto st294
tr841:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
	goto st294
tr848:
//line parse.rl:551
 end=m; d=1;
	goto st294
tr852:
//line parse.rl:551
 start=m; end=6;d=0;
	goto st294
	st294:
		if p++; p == pe {
			goto _test_eof294
		}
	st_case_294:
//line parse.go:18832
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr601
		}
		goto st0
tr601:
//line parse.rl:40

            mark = p;
        
	goto st427
	st427:
		if p++; p == pe {
			goto _test_eof427
		}
	st_case_427:
//line parse.go:18848
		switch ( s)[p] {
		case 32:
			goto tr843
		case 44:
			goto tr844
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st427
			}
		case ( s)[p] >= 9:
			goto tr843
		}
		goto st0
	st295:
		if p++; p == pe {
			goto _test_eof295
		}
	st_case_295:
		switch ( s)[p] {
		case 82:
			goto st296
		case 114:
			goto st296
		}
		goto st0
	st296:
		if p++; p == pe {
			goto _test_eof296
		}
	st_case_296:
		switch ( s)[p] {
		case 73:
			goto tr603
		case 105:
			goto tr603
		}
		goto st0
tr603:
//line parse.rl:518
m=5
	goto st428
tr605:
//line parse.rl:518
m=1
	goto st428
tr608:
//line parse.rl:518
m=6
	goto st428
tr609:
//line parse.rl:518
m=0
	goto st428
tr612:
//line parse.rl:518
m=4
	goto st428
tr613:
//line parse.rl:518
m=2
	goto st428
tr615:
//line parse.rl:518
m=3
	goto st428
	st428:
		if p++; p == pe {
			goto _test_eof428
		}
	st_case_428:
//line parse.go:18921
		switch ( s)[p] {
		case 32:
			goto tr846
		case 44:
			goto tr847
		case 47:
			goto tr848
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr846
		}
		goto st0
	st297:
		if p++; p == pe {
			goto _test_eof297
		}
	st_case_297:
		switch ( s)[p] {
		case 79:
			goto st298
		case 111:
			goto st298
		}
		goto st0
	st298:
		if p++; p == pe {
			goto _test_eof298
		}
	st_case_298:
		switch ( s)[p] {
		case 78:
			goto tr605
		case 110:
			goto tr605
		}
		goto st0
	st299:
		if p++; p == pe {
			goto _test_eof299
		}
	st_case_299:
		switch ( s)[p] {
		case 65:
			goto st300
		case 85:
			goto st301
		case 97:
			goto st300
		case 117:
			goto st301
		}
		goto st0
	st300:
		if p++; p == pe {
			goto _test_eof300
		}
	st_case_300:
		switch ( s)[p] {
		case 84:
			goto tr608
		case 116:
			goto tr608
		}
		goto st0
	st301:
		if p++; p == pe {
			goto _test_eof301
		}
	st_case_301:
		switch ( s)[p] {
		case 78:
			goto tr609
		case 110:
			goto tr609
		}
		goto st0
	st302:
		if p++; p == pe {
			goto _test_eof302
		}
	st_case_302:
		switch ( s)[p] {
		case 72:
			goto st303
		case 85:
			goto st304
		case 104:
			goto st303
		case 117:
			goto st304
		}
		goto st0
	st303:
		if p++; p == pe {
			goto _test_eof303
		}
	st_case_303:
		switch ( s)[p] {
		case 85:
			goto tr612
		case 117:
			goto tr612
		}
		goto st0
	st304:
		if p++; p == pe {
			goto _test_eof304
		}
	st_case_304:
		switch ( s)[p] {
		case 69:
			goto tr613
		case 101:
			goto tr613
		}
		goto st0
	st305:
		if p++; p == pe {
			goto _test_eof305
		}
	st_case_305:
		switch ( s)[p] {
		case 69:
			goto st306
		case 101:
			goto st306
		}
		goto st0
	st306:
		if p++; p == pe {
			goto _test_eof306
		}
	st_case_306:
		switch ( s)[p] {
		case 68:
			goto tr615
		case 100:
			goto tr615
		}
		goto st0
tr590:
//line parse.rl:551
d=0;
	goto st307
	st307:
		if p++; p == pe {
			goto _test_eof307
		}
	st_case_307:
//line parse.go:19071
		switch ( s)[p] {
		case 82:
			goto st308
		case 114:
			goto st308
		}
		goto st0
	st308:
		if p++; p == pe {
			goto _test_eof308
		}
	st_case_308:
		switch ( s)[p] {
		case 73:
			goto tr617
		case 105:
			goto tr617
		}
		goto st0
tr617:
//line parse.rl:518
m=5
	goto st429
tr619:
//line parse.rl:518
m=1
	goto st429
tr622:
//line parse.rl:518
m=6
	goto st429
tr623:
//line parse.rl:518
m=0
	goto st429
tr626:
//line parse.rl:518
m=4
	goto st429
tr627:
//line parse.rl:518
m=2
	goto st429
tr629:
//line parse.rl:518
m=3
	goto st429
	st429:
		if p++; p == pe {
			goto _test_eof429
		}
	st_case_429:
//line parse.go:19124
		switch ( s)[p] {
		case 32:
			goto tr849
		case 44:
			goto tr850
		case 45:
			goto tr851
		case 47:
			goto tr852
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr849
		}
		goto st0
tr591:
//line parse.rl:551
d=0;
	goto st309
	st309:
		if p++; p == pe {
			goto _test_eof309
		}
	st_case_309:
//line parse.go:19148
		switch ( s)[p] {
		case 79:
			goto st310
		case 111:
			goto st310
		}
		goto st0
	st310:
		if p++; p == pe {
			goto _test_eof310
		}
	st_case_310:
		switch ( s)[p] {
		case 78:
			goto tr619
		case 110:
			goto tr619
		}
		goto st0
tr592:
//line parse.rl:551
d=0;
	goto st311
	st311:
		if p++; p == pe {
			goto _test_eof311
		}
	st_case_311:
//line parse.go:19177
		switch ( s)[p] {
		case 65:
			goto st312
		case 85:
			goto st313
		case 97:
			goto st312
		case 117:
			goto st313
		}
		goto st0
	st312:
		if p++; p == pe {
			goto _test_eof312
		}
	st_case_312:
		switch ( s)[p] {
		case 84:
			goto tr622
		case 116:
			goto tr622
		}
		goto st0
	st313:
		if p++; p == pe {
			goto _test_eof313
		}
	st_case_313:
		switch ( s)[p] {
		case 78:
			goto tr623
		case 110:
			goto tr623
		}
		goto st0
tr593:
//line parse.rl:551
d=0;
	goto st314
	st314:
		if p++; p == pe {
			goto _test_eof314
		}
	st_case_314:
//line parse.go:19222
		switch ( s)[p] {
		case 72:
			goto st315
		case 85:
			goto st316
		case 104:
			goto st315
		case 117:
			goto st316
		}
		goto st0
	st315:
		if p++; p == pe {
			goto _test_eof315
		}
	st_case_315:
		switch ( s)[p] {
		case 85:
			goto tr626
		case 117:
			goto tr626
		}
		goto st0
	st316:
		if p++; p == pe {
			goto _test_eof316
		}
	st_case_316:
		switch ( s)[p] {
		case 69:
			goto tr627
		case 101:
			goto tr627
		}
		goto st0
tr594:
//line parse.rl:551
d=0;
	goto st317
	st317:
		if p++; p == pe {
			goto _test_eof317
		}
	st_case_317:
//line parse.go:19267
		switch ( s)[p] {
		case 69:
			goto st318
		case 101:
			goto st318
		}
		goto st0
	st318:
		if p++; p == pe {
			goto _test_eof318
		}
	st_case_318:
		switch ( s)[p] {
		case 68:
			goto tr629
		case 100:
			goto tr629
		}
		goto st0
tr585:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st319
tr631:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st319
tr645:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st319
tr650:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:548
d=m
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st319
tr656:
//line parse.rl:547
 end=m-1; d=1;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st319
tr681:
//line parse.rl:547
 start=m-1; end=0;d=0;
//line parse.rl:323

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11,
                    1<<2|1<<5|1<<8|1<<11,
                    1<<3|1<<7|1<<11,
                    1<<4|1<<9,
                    1<<5|1<<11,
                    1<<6,
                    1<<7,
                    1<<8,
                    1<<9,
                    1<<10,
                    1<<11,
                }
                if d>12{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>=12 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if  end>=12 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.month |= 1<<(m-1)
                }else{
                    nt.month |= (x[d-1]<<start)&endMask
                }
                fmt.Printf("month **** %b\n", nt.month)
            }
        
	goto st319
	st319:
		if p++; p == pe {
			goto _test_eof319
		}
	st_case_319:
//line parse.go:19577
		switch ( s)[p] {
		case 42:
			goto tr574
		case 65:
			goto tr576
		case 68:
			goto tr577
		case 70:
			goto tr578
		case 74:
			goto tr579
		case 77:
			goto tr580
		case 78:
			goto tr581
		case 79:
			goto tr582
		case 83:
			goto tr583
		case 97:
			goto tr576
		case 100:
			goto tr577
		case 102:
			goto tr578
		case 106:
			goto tr579
		case 109:
			goto tr580
		case 110:
			goto tr581
		case 111:
			goto tr582
		case 115:
			goto tr583
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr575
		}
		goto st0
tr575:
//line parse.rl:547
d=0;
//line parse.rl:40

            mark = p;
        
	goto st320
	st320:
		if p++; p == pe {
			goto _test_eof320
		}
	st_case_320:
//line parse.go:19631
		switch ( s)[p] {
		case 32:
			goto tr630
		case 44:
			goto tr631
		case 45:
			goto tr632
		case 47:
			goto tr633
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st320
			}
		case ( s)[p] >= 9:
			goto tr630
		}
		goto st0
tr632:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st321
tr682:
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st321
	st321:
		if p++; p == pe {
			goto _test_eof321
		}
	st_case_321:
//line parse.go:19671
		switch ( s)[p] {
		case 65:
			goto st325
		case 68:
			goto st329
		case 70:
			goto st331
		case 74:
			goto st333
		case 77:
			goto st336
		case 78:
			goto st338
		case 79:
			goto st340
		case 83:
			goto st342
		case 97:
			goto st325
		case 100:
			goto st329
		case 102:
			goto st331
		case 106:
			goto st333
		case 109:
			goto st336
		case 110:
			goto st338
		case 111:
			goto st340
		case 115:
			goto st342
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr635
		}
		goto st0
tr635:
//line parse.rl:40

            mark = p;
        
	goto st322
	st322:
		if p++; p == pe {
			goto _test_eof322
		}
	st_case_322:
//line parse.go:19721
		switch ( s)[p] {
		case 32:
			goto tr644
		case 44:
			goto tr645
		case 47:
			goto tr646
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st322
			}
		case ( s)[p] >= 9:
			goto tr644
		}
		goto st0
tr586:
//line parse.rl:547
 start=0;end=11;m=0;d=1; 
	goto st323
tr633:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st323
tr646:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:547
 end=m-1; d=1;
	goto st323
tr657:
//line parse.rl:547
 end=m-1; d=1;
	goto st323
tr683:
//line parse.rl:547
 start=m-1; end=0;d=0;
	goto st323
	st323:
		if p++; p == pe {
			goto _test_eof323
		}
	st_case_323:
//line parse.go:19778
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr648
		}
		goto st0
tr648:
//line parse.rl:40

            mark = p;
        
	goto st324
	st324:
		if p++; p == pe {
			goto _test_eof324
		}
	st_case_324:
//line parse.go:19794
		switch ( s)[p] {
		case 32:
			goto tr649
		case 44:
			goto tr650
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st324
			}
		case ( s)[p] >= 9:
			goto tr649
		}
		goto st0
	st325:
		if p++; p == pe {
			goto _test_eof325
		}
	st_case_325:
		switch ( s)[p] {
		case 80:
			goto st326
		case 85:
			goto st328
		case 112:
			goto st326
		case 117:
			goto st328
		}
		goto st0
	st326:
		if p++; p == pe {
			goto _test_eof326
		}
	st_case_326:
		switch ( s)[p] {
		case 82:
			goto tr654
		case 114:
			goto tr654
		}
		goto st0
tr654:
//line parse.rl:519
m=4
	goto st327
tr658:
//line parse.rl:519
m=8
	goto st327
tr660:
//line parse.rl:519
m=12
	goto st327
tr662:
//line parse.rl:519
m=2
	goto st327
tr665:
//line parse.rl:519
m=1
	goto st327
tr666:
//line parse.rl:519
m=7
	goto st327
tr667:
//line parse.rl:519
m=6
	goto st327
tr669:
//line parse.rl:519
m=3
	goto st327
tr670:
//line parse.rl:519
m=5
	goto st327
tr672:
//line parse.rl:519
m=11
	goto st327
tr674:
//line parse.rl:519
m=10
	goto st327
tr676:
//line parse.rl:519
m=9
	goto st327
	st327:
		if p++; p == pe {
			goto _test_eof327
		}
	st_case_327:
//line parse.go:19891
		switch ( s)[p] {
		case 32:
			goto tr655
		case 44:
			goto tr656
		case 47:
			goto tr657
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr655
		}
		goto st0
	st328:
		if p++; p == pe {
			goto _test_eof328
		}
	st_case_328:
		switch ( s)[p] {
		case 71:
			goto tr658
		case 103:
			goto tr658
		}
		goto st0
	st329:
		if p++; p == pe {
			goto _test_eof329
		}
	st_case_329:
		switch ( s)[p] {
		case 69:
			goto st330
		case 101:
			goto st330
		}
		goto st0
	st330:
		if p++; p == pe {
			goto _test_eof330
		}
	st_case_330:
		switch ( s)[p] {
		case 67:
			goto tr660
		case 99:
			goto tr660
		}
		goto st0
	st331:
		if p++; p == pe {
			goto _test_eof331
		}
	st_case_331:
		switch ( s)[p] {
		case 69:
			goto st332
		case 101:
			goto st332
		}
		goto st0
	st332:
		if p++; p == pe {
			goto _test_eof332
		}
	st_case_332:
		switch ( s)[p] {
		case 66:
			goto tr662
		case 98:
			goto tr662
		}
		goto st0
	st333:
		if p++; p == pe {
			goto _test_eof333
		}
	st_case_333:
		switch ( s)[p] {
		case 65:
			goto st334
		case 85:
			goto st335
		case 97:
			goto st334
		case 117:
			goto st335
		}
		goto st0
	st334:
		if p++; p == pe {
			goto _test_eof334
		}
	st_case_334:
		switch ( s)[p] {
		case 78:
			goto tr665
		case 110:
			goto tr665
		}
		goto st0
	st335:
		if p++; p == pe {
			goto _test_eof335
		}
	st_case_335:
		switch ( s)[p] {
		case 76:
			goto tr666
		case 78:
			goto tr667
		case 108:
			goto tr666
		case 110:
			goto tr667
		}
		goto st0
	st336:
		if p++; p == pe {
			goto _test_eof336
		}
	st_case_336:
		switch ( s)[p] {
		case 65:
			goto st337
		case 97:
			goto st337
		}
		goto st0
	st337:
		if p++; p == pe {
			goto _test_eof337
		}
	st_case_337:
		switch ( s)[p] {
		case 82:
			goto tr669
		case 89:
			goto tr670
		case 114:
			goto tr669
		case 121:
			goto tr670
		}
		goto st0
	st338:
		if p++; p == pe {
			goto _test_eof338
		}
	st_case_338:
		switch ( s)[p] {
		case 79:
			goto st339
		case 111:
			goto st339
		}
		goto st0
	st339:
		if p++; p == pe {
			goto _test_eof339
		}
	st_case_339:
		switch ( s)[p] {
		case 86:
			goto tr672
		case 118:
			goto tr672
		}
		goto st0
	st340:
		if p++; p == pe {
			goto _test_eof340
		}
	st_case_340:
		switch ( s)[p] {
		case 67:
			goto st341
		case 99:
			goto st341
		}
		goto st0
	st341:
		if p++; p == pe {
			goto _test_eof341
		}
	st_case_341:
		switch ( s)[p] {
		case 84:
			goto tr674
		case 116:
			goto tr674
		}
		goto st0
	st342:
		if p++; p == pe {
			goto _test_eof342
		}
	st_case_342:
		switch ( s)[p] {
		case 69:
			goto st343
		case 101:
			goto st343
		}
		goto st0
	st343:
		if p++; p == pe {
			goto _test_eof343
		}
	st_case_343:
		switch ( s)[p] {
		case 80:
			goto tr676
		case 112:
			goto tr676
		}
		goto st0
tr576:
//line parse.rl:547
d=0;
	goto st344
	st344:
		if p++; p == pe {
			goto _test_eof344
		}
	st_case_344:
//line parse.go:20117
		switch ( s)[p] {
		case 80:
			goto st345
		case 85:
			goto st347
		case 112:
			goto st345
		case 117:
			goto st347
		}
		goto st0
	st345:
		if p++; p == pe {
			goto _test_eof345
		}
	st_case_345:
		switch ( s)[p] {
		case 82:
			goto tr679
		case 114:
			goto tr679
		}
		goto st0
tr679:
//line parse.rl:519
m=4
	goto st346
tr684:
//line parse.rl:519
m=8
	goto st346
tr686:
//line parse.rl:519
m=12
	goto st346
tr688:
//line parse.rl:519
m=2
	goto st346
tr691:
//line parse.rl:519
m=1
	goto st346
tr692:
//line parse.rl:519
m=7
	goto st346
tr693:
//line parse.rl:519
m=6
	goto st346
tr695:
//line parse.rl:519
m=3
	goto st346
tr696:
//line parse.rl:519
m=5
	goto st346
tr698:
//line parse.rl:519
m=11
	goto st346
tr700:
//line parse.rl:519
m=10
	goto st346
tr702:
//line parse.rl:519
m=9
	goto st346
	st346:
		if p++; p == pe {
			goto _test_eof346
		}
	st_case_346:
//line parse.go:20194
		switch ( s)[p] {
		case 32:
			goto tr680
		case 44:
			goto tr681
		case 45:
			goto tr682
		case 47:
			goto tr683
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr680
		}
		goto st0
	st347:
		if p++; p == pe {
			goto _test_eof347
		}
	st_case_347:
		switch ( s)[p] {
		case 71:
			goto tr684
		case 103:
			goto tr684
		}
		goto st0
tr577:
//line parse.rl:547
d=0;
	goto st348
	st348:
		if p++; p == pe {
			goto _test_eof348
		}
	st_case_348:
//line parse.go:20230
		switch ( s)[p] {
		case 69:
			goto st349
		case 101:
			goto st349
		}
		goto st0
	st349:
		if p++; p == pe {
			goto _test_eof349
		}
	st_case_349:
		switch ( s)[p] {
		case 67:
			goto tr686
		case 99:
			goto tr686
		}
		goto st0
tr578:
//line parse.rl:547
d=0;
	goto st350
	st350:
		if p++; p == pe {
			goto _test_eof350
		}
	st_case_350:
//line parse.go:20259
		switch ( s)[p] {
		case 69:
			goto st351
		case 101:
			goto st351
		}
		goto st0
	st351:
		if p++; p == pe {
			goto _test_eof351
		}
	st_case_351:
		switch ( s)[p] {
		case 66:
			goto tr688
		case 98:
			goto tr688
		}
		goto st0
tr579:
//line parse.rl:547
d=0;
	goto st352
	st352:
		if p++; p == pe {
			goto _test_eof352
		}
	st_case_352:
//line parse.go:20288
		switch ( s)[p] {
		case 65:
			goto st353
		case 85:
			goto st354
		case 97:
			goto st353
		case 117:
			goto st354
		}
		goto st0
	st353:
		if p++; p == pe {
			goto _test_eof353
		}
	st_case_353:
		switch ( s)[p] {
		case 78:
			goto tr691
		case 110:
			goto tr691
		}
		goto st0
	st354:
		if p++; p == pe {
			goto _test_eof354
		}
	st_case_354:
		switch ( s)[p] {
		case 76:
			goto tr692
		case 78:
			goto tr693
		case 108:
			goto tr692
		case 110:
			goto tr693
		}
		goto st0
tr580:
//line parse.rl:547
d=0;
	goto st355
	st355:
		if p++; p == pe {
			goto _test_eof355
		}
	st_case_355:
//line parse.go:20337
		switch ( s)[p] {
		case 65:
			goto st356
		case 97:
			goto st356
		}
		goto st0
	st356:
		if p++; p == pe {
			goto _test_eof356
		}
	st_case_356:
		switch ( s)[p] {
		case 82:
			goto tr695
		case 89:
			goto tr696
		case 114:
			goto tr695
		case 121:
			goto tr696
		}
		goto st0
tr581:
//line parse.rl:547
d=0;
	goto st357
	st357:
		if p++; p == pe {
			goto _test_eof357
		}
	st_case_357:
//line parse.go:20370
		switch ( s)[p] {
		case 79:
			goto st358
		case 111:
			goto st358
		}
		goto st0
	st358:
		if p++; p == pe {
			goto _test_eof358
		}
	st_case_358:
		switch ( s)[p] {
		case 86:
			goto tr698
		case 118:
			goto tr698
		}
		goto st0
tr582:
//line parse.rl:547
d=0;
	goto st359
	st359:
		if p++; p == pe {
			goto _test_eof359
		}
	st_case_359:
//line parse.go:20399
		switch ( s)[p] {
		case 67:
			goto st360
		case 99:
			goto st360
		}
		goto st0
	st360:
		if p++; p == pe {
			goto _test_eof360
		}
	st_case_360:
		switch ( s)[p] {
		case 84:
			goto tr700
		case 116:
			goto tr700
		}
		goto st0
tr583:
//line parse.rl:547
d=0;
	goto st361
	st361:
		if p++; p == pe {
			goto _test_eof361
		}
	st_case_361:
//line parse.go:20428
		switch ( s)[p] {
		case 69:
			goto st362
		case 101:
			goto st362
		}
		goto st0
	st362:
		if p++; p == pe {
			goto _test_eof362
		}
	st_case_362:
		switch ( s)[p] {
		case 80:
			goto tr702
		case 112:
			goto tr702
		}
		goto st0
tr571:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st363
tr704:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st363
tr715:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st363
tr720:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:544
d=m
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st363
tr725:
//line parse.rl:543
 end=m-1; d=1;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st363
tr742:
//line parse.rl:543
 start=m-1; end=0;d=0;
//line parse.rl:435

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23|1<<24|1<<25|1<<26|1<<27|1<<28|1<<29|1<<30,
                    1<<1|1<<3|1<<5|1<<7|1<<9|1<<11|1<<13|1<<15|1<<17|1<<19|1<<21|1<<23|1<<25|1<<27|1<<29,
                    1<<2|1<<5|1<<8|1<<11|1<<14|1<<17|1<<20|1<<23|1<<26|1<<29,
                    1<<3|1<<7|1<<11|1<<15|1<<19|1<<23|1<<27,
                    1<<4|1<<9|1<<14|1<<19|1<<24|1<<29,
                    1<<5|1<<11|1<<17|1<<23|1<<29,
                    1<<6|1<<13|1<<20|1<<27,
                    1<<7|1<<15|1<<23,
                    1<<8|1<<17|1<<26,
                    1<<9|1<<19|1<<29,
                    1<<10|1<<21,
                    1<<11|1<<23,
                    1<<12|1<<25,
                    1<<13|1<<27,
                    1<<14|1<<29,
                    1<<15,
                    1<<16,
                    1<<17,
                    1<<18,
                    1<<19,
                    1<<20,
                    1<<21,
                    1<<22,
                    1<<23,
                    1<<24,
                    1<<25,
                    1<<26,
                    1<<27,
                    1<<28,
                    1<<29,
                    1<<30,
                }
                if d>31{
                    return nt, fmt.Errorf("invalid month */%d", d)
                }
                if start>30 {
                    return nt, fmt.Errorf("invalid start month %d", start)
                }
                if end>30 {
                    return nt, fmt.Errorf("invalid end month %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.dom |= 1<<(m-1)
                }else{
                    nt.dom |= (x[d-1]<<start)&endMask // start-1 because 1 is the first day of month
                }
            }
            fmt.Printf("dom %b\n", nt.dom)
        
	goto st363
	st363:
		if p++; p == pe {
			goto _test_eof363
		}
	st_case_363:
//line parse.go:20852
		switch ( s)[p] {
		case 42:
			goto tr563
		case 70:
			goto tr565
		case 77:
			goto tr566
		case 83:
			goto tr567
		case 84:
			goto tr568
		case 87:
			goto tr569
		case 102:
			goto tr565
		case 109:
			goto tr566
		case 115:
			goto tr567
		case 116:
			goto tr568
		case 119:
			goto tr569
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr564
		}
		goto st0
tr564:
//line parse.rl:543
d=0;
//line parse.rl:40

            mark = p;
        
	goto st364
	st364:
		if p++; p == pe {
			goto _test_eof364
		}
	st_case_364:
//line parse.go:20894
		switch ( s)[p] {
		case 32:
			goto tr703
		case 44:
			goto tr704
		case 45:
			goto tr705
		case 47:
			goto tr706
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st364
			}
		case ( s)[p] >= 9:
			goto tr703
		}
		goto st0
tr705:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st365
tr743:
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st365
	st365:
		if p++; p == pe {
			goto _test_eof365
		}
	st_case_365:
//line parse.go:20934
		switch ( s)[p] {
		case 70:
			goto st369
		case 77:
			goto st372
		case 83:
			goto st374
		case 84:
			goto st377
		case 87:
			goto st380
		case 102:
			goto st369
		case 109:
			goto st372
		case 115:
			goto st374
		case 116:
			goto st377
		case 119:
			goto st380
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr708
		}
		goto st0
tr708:
//line parse.rl:40

            mark = p;
        
	goto st366
	st366:
		if p++; p == pe {
			goto _test_eof366
		}
	st_case_366:
//line parse.go:20972
		switch ( s)[p] {
		case 32:
			goto tr714
		case 44:
			goto tr715
		case 47:
			goto tr716
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st366
			}
		case ( s)[p] >= 9:
			goto tr714
		}
		goto st0
tr572:
//line parse.rl:543
 start=0;end=30;m=0;d=1; 
	goto st367
tr706:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st367
tr716:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:543
 end=m-1; d=1;
	goto st367
tr726:
//line parse.rl:543
 end=m-1; d=1;
	goto st367
tr744:
//line parse.rl:543
 start=m-1; end=0;d=0;
	goto st367
	st367:
		if p++; p == pe {
			goto _test_eof367
		}
	st_case_367:
//line parse.go:21029
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr718
		}
		goto st0
tr718:
//line parse.rl:40

            mark = p;
        
	goto st368
	st368:
		if p++; p == pe {
			goto _test_eof368
		}
	st_case_368:
//line parse.go:21045
		switch ( s)[p] {
		case 32:
			goto tr719
		case 44:
			goto tr720
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st368
			}
		case ( s)[p] >= 9:
			goto tr719
		}
		goto st0
	st369:
		if p++; p == pe {
			goto _test_eof369
		}
	st_case_369:
		switch ( s)[p] {
		case 82:
			goto st370
		case 114:
			goto st370
		}
		goto st0
	st370:
		if p++; p == pe {
			goto _test_eof370
		}
	st_case_370:
		switch ( s)[p] {
		case 73:
			goto tr723
		case 105:
			goto tr723
		}
		goto st0
tr723:
//line parse.rl:518
m=5
	goto st371
tr728:
//line parse.rl:518
m=1
	goto st371
tr731:
//line parse.rl:518
m=6
	goto st371
tr732:
//line parse.rl:518
m=0
	goto st371
tr735:
//line parse.rl:518
m=4
	goto st371
tr736:
//line parse.rl:518
m=2
	goto st371
tr738:
//line parse.rl:518
m=3
	goto st371
	st371:
		if p++; p == pe {
			goto _test_eof371
		}
	st_case_371:
//line parse.go:21118
		switch ( s)[p] {
		case 32:
			goto tr724
		case 44:
			goto tr725
		case 47:
			goto tr726
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr724
		}
		goto st0
	st372:
		if p++; p == pe {
			goto _test_eof372
		}
	st_case_372:
		switch ( s)[p] {
		case 79:
			goto st373
		case 111:
			goto st373
		}
		goto st0
	st373:
		if p++; p == pe {
			goto _test_eof373
		}
	st_case_373:
		switch ( s)[p] {
		case 78:
			goto tr728
		case 110:
			goto tr728
		}
		goto st0
	st374:
		if p++; p == pe {
			goto _test_eof374
		}
	st_case_374:
		switch ( s)[p] {
		case 65:
			goto st375
		case 85:
			goto st376
		case 97:
			goto st375
		case 117:
			goto st376
		}
		goto st0
	st375:
		if p++; p == pe {
			goto _test_eof375
		}
	st_case_375:
		switch ( s)[p] {
		case 84:
			goto tr731
		case 116:
			goto tr731
		}
		goto st0
	st376:
		if p++; p == pe {
			goto _test_eof376
		}
	st_case_376:
		switch ( s)[p] {
		case 78:
			goto tr732
		case 110:
			goto tr732
		}
		goto st0
	st377:
		if p++; p == pe {
			goto _test_eof377
		}
	st_case_377:
		switch ( s)[p] {
		case 72:
			goto st378
		case 85:
			goto st379
		case 104:
			goto st378
		case 117:
			goto st379
		}
		goto st0
	st378:
		if p++; p == pe {
			goto _test_eof378
		}
	st_case_378:
		switch ( s)[p] {
		case 85:
			goto tr735
		case 117:
			goto tr735
		}
		goto st0
	st379:
		if p++; p == pe {
			goto _test_eof379
		}
	st_case_379:
		switch ( s)[p] {
		case 69:
			goto tr736
		case 101:
			goto tr736
		}
		goto st0
	st380:
		if p++; p == pe {
			goto _test_eof380
		}
	st_case_380:
		switch ( s)[p] {
		case 69:
			goto st381
		case 101:
			goto st381
		}
		goto st0
	st381:
		if p++; p == pe {
			goto _test_eof381
		}
	st_case_381:
		switch ( s)[p] {
		case 68:
			goto tr738
		case 100:
			goto tr738
		}
		goto st0
tr565:
//line parse.rl:543
d=0;
	goto st382
	st382:
		if p++; p == pe {
			goto _test_eof382
		}
	st_case_382:
//line parse.go:21268
		switch ( s)[p] {
		case 82:
			goto st383
		case 114:
			goto st383
		}
		goto st0
	st383:
		if p++; p == pe {
			goto _test_eof383
		}
	st_case_383:
		switch ( s)[p] {
		case 73:
			goto tr740
		case 105:
			goto tr740
		}
		goto st0
tr740:
//line parse.rl:518
m=5
	goto st384
tr746:
//line parse.rl:518
m=1
	goto st384
tr749:
//line parse.rl:518
m=6
	goto st384
tr750:
//line parse.rl:518
m=0
	goto st384
tr753:
//line parse.rl:518
m=4
	goto st384
tr754:
//line parse.rl:518
m=2
	goto st384
tr756:
//line parse.rl:518
m=3
	goto st384
	st384:
		if p++; p == pe {
			goto _test_eof384
		}
	st_case_384:
//line parse.go:21321
		switch ( s)[p] {
		case 32:
			goto tr741
		case 44:
			goto tr742
		case 45:
			goto tr743
		case 47:
			goto tr744
		}
		if 9 <= ( s)[p] && ( s)[p] <= 13 {
			goto tr741
		}
		goto st0
tr566:
//line parse.rl:543
d=0;
	goto st385
	st385:
		if p++; p == pe {
			goto _test_eof385
		}
	st_case_385:
//line parse.go:21345
		switch ( s)[p] {
		case 79:
			goto st386
		case 111:
			goto st386
		}
		goto st0
	st386:
		if p++; p == pe {
			goto _test_eof386
		}
	st_case_386:
		switch ( s)[p] {
		case 78:
			goto tr746
		case 110:
			goto tr746
		}
		goto st0
tr567:
//line parse.rl:543
d=0;
	goto st387
	st387:
		if p++; p == pe {
			goto _test_eof387
		}
	st_case_387:
//line parse.go:21374
		switch ( s)[p] {
		case 65:
			goto st388
		case 85:
			goto st389
		case 97:
			goto st388
		case 117:
			goto st389
		}
		goto st0
	st388:
		if p++; p == pe {
			goto _test_eof388
		}
	st_case_388:
		switch ( s)[p] {
		case 84:
			goto tr749
		case 116:
			goto tr749
		}
		goto st0
	st389:
		if p++; p == pe {
			goto _test_eof389
		}
	st_case_389:
		switch ( s)[p] {
		case 78:
			goto tr750
		case 110:
			goto tr750
		}
		goto st0
tr568:
//line parse.rl:543
d=0;
	goto st390
	st390:
		if p++; p == pe {
			goto _test_eof390
		}
	st_case_390:
//line parse.go:21419
		switch ( s)[p] {
		case 72:
			goto st391
		case 85:
			goto st392
		case 104:
			goto st391
		case 117:
			goto st392
		}
		goto st0
	st391:
		if p++; p == pe {
			goto _test_eof391
		}
	st_case_391:
		switch ( s)[p] {
		case 85:
			goto tr753
		case 117:
			goto tr753
		}
		goto st0
	st392:
		if p++; p == pe {
			goto _test_eof392
		}
	st_case_392:
		switch ( s)[p] {
		case 69:
			goto tr754
		case 101:
			goto tr754
		}
		goto st0
tr569:
//line parse.rl:543
d=0;
	goto st393
	st393:
		if p++; p == pe {
			goto _test_eof393
		}
	st_case_393:
//line parse.go:21464
		switch ( s)[p] {
		case 69:
			goto st394
		case 101:
			goto st394
		}
		goto st0
	st394:
		if p++; p == pe {
			goto _test_eof394
		}
	st_case_394:
		switch ( s)[p] {
		case 68:
			goto tr756
		case 100:
			goto tr756
		}
		goto st0
tr560:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st395
tr758:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st395
tr764:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st395
tr769:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:538
d=m
//line parse.rl:273

            {
                x:= [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6|1<<7|1<<8|1<<9|1<<10|1<<11|1<<12|1<<13|1<<14|1<<15|1<<16|1<<17|1<<18|1<<19|1<<20|1<<21|1<<22|1<<23,
                    1|1<<2|1<<4|1<<6|1<<8|1<<10|1<<12|1<<14|1<<16|1<<18|1<<20|1<<22,
                    1|1<<3|1<<6|1<<9|1<<12|1<<15|1<<18|1<<21,
                    1|1<<4|1<<8|1<<12|1<<16|1<<20,
                    1|1<<5|1<<10|1<<15|1<<20,
                    1|1<<6|1<<12|1<<18,
                    1|1<<7|1<<14|1<<21,
                    1|1<<8|1<<16,
                    1|1<<9|1<<18,
                    1|1<<10|1<<20,
                    1|1<<11|1<<22,
                    1|1<<12,
                    1|1<<13,
                    1|1<<14,
                    1|1<<15,
                    1|1<<16,
                    1|1<<17,
                    1|1<<18,
                    1|1<<19,
                    1|1<<20,
                    1|1<<21,
                    1|1<<22,
                    1|1<<23,
                }
                if d>=24{
                    return nt, fmt.Errorf("invalid hour */%d", d)
                }
                if start>=24 {
                    return nt, fmt.Errorf("invalid start hour %d", start)
                }
                if end>=24 {
                    return nt, fmt.Errorf("invalid end hour %d", start)
                }
                // handle the case that isn't a 
                endOp := 64-end
                if end==0{
                    endOp = 0
                }
                endMask := (^uint64(0))<<endOp>>endOp
                if d==0{
                    nt.hour |= 1<<m
                }else{
                    nt.hour |= (x[d-1]<<start)&endMask
                }
            }
        
	goto st395
	st395:
		if p++; p == pe {
			goto _test_eof395
		}
	st_case_395:
//line parse.go:21726
		if ( s)[p] == 42 {
			goto tr557
		}
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr558
		}
		goto st0
tr558:
//line parse.rl:537
d=0;
//line parse.rl:40

            mark = p;
        
	goto st396
	st396:
		if p++; p == pe {
			goto _test_eof396
		}
	st_case_396:
//line parse.go:21747
		switch ( s)[p] {
		case 32:
			goto tr757
		case 44:
			goto tr758
		case 45:
			goto tr759
		case 47:
			goto tr760
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st396
			}
		case ( s)[p] >= 9:
			goto tr757
		}
		goto st0
tr759:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
	goto st397
	st397:
		if p++; p == pe {
			goto _test_eof397
		}
	st_case_397:
//line parse.go:21783
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr762
		}
		goto st0
tr762:
//line parse.rl:40

            mark = p;
        
	goto st398
	st398:
		if p++; p == pe {
			goto _test_eof398
		}
	st_case_398:
//line parse.go:21799
		switch ( s)[p] {
		case 32:
			goto tr763
		case 44:
			goto tr764
		case 47:
			goto tr765
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st398
			}
		case ( s)[p] >= 9:
			goto tr763
		}
		goto st0
tr561:
//line parse.rl:537
 start=0;end=23;m=1;d=1; 
	goto st399
tr760:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 start=m; end=0;d=0;
	goto st399
tr765:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:537
 end=m; d=1;
	goto st399
	st399:
		if p++; p == pe {
			goto _test_eof399
		}
	st_case_399:
//line parse.go:21848
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr767
		}
		goto st0
tr767:
//line parse.rl:40

            mark = p;
        
	goto st400
	st400:
		if p++; p == pe {
			goto _test_eof400
		}
	st_case_400:
//line parse.go:21864
		switch ( s)[p] {
		case 32:
			goto tr768
		case 44:
			goto tr769
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st400
			}
		case ( s)[p] >= 9:
			goto tr768
		}
		goto st0
tr555:
//line parse.rl:530
 start=0;end=59;m=1;d=1; 
	goto st401
tr778:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st401
tr783:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 end=m; d=1;
	goto st401
	st401:
		if p++; p == pe {
			goto _test_eof401
		}
	st_case_401:
//line parse.go:21911
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr771
		}
		goto st0
tr771:
//line parse.rl:40

            mark = p;
        
	goto st402
	st402:
		if p++; p == pe {
			goto _test_eof402
		}
	st_case_402:
//line parse.go:21927
		switch ( s)[p] {
		case 32:
			goto tr772
		case 44:
			goto tr773
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st402
			}
		case ( s)[p] >= 9:
			goto tr772
		}
		goto st0
tr552:
//line parse.rl:530
d=0;
//line parse.rl:40

            mark = p;
        
	goto st403
	st403:
		if p++; p == pe {
			goto _test_eof403
		}
	st_case_403:
//line parse.go:21956
		switch ( s)[p] {
		case 32:
			goto tr775
		case 44:
			goto tr776
		case 45:
			goto tr777
		case 47:
			goto tr778
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st403
			}
		case ( s)[p] >= 9:
			goto tr775
		}
		goto st0
tr777:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:530
 start=m; end=0;d=0;
	goto st404
	st404:
		if p++; p == pe {
			goto _test_eof404
		}
	st_case_404:
//line parse.go:21992
		if 48 <= ( s)[p] && ( s)[p] <= 57 {
			goto tr780
		}
		goto st0
tr780:
//line parse.rl:40

            mark = p;
        
	goto st405
	st405:
		if p++; p == pe {
			goto _test_eof405
		}
	st_case_405:
//line parse.go:22008
		switch ( s)[p] {
		case 32:
			goto tr781
		case 44:
			goto tr782
		case 47:
			goto tr783
		}
		switch {
		case ( s)[p] > 13:
			if 48 <= ( s)[p] && ( s)[p] <= 57 {
				goto st405
			}
		case ( s)[p] >= 9:
			goto tr781
		}
		goto st0
	st_out:
	_test_eof406: cs = 406; goto _test_eof
	_test_eof407: cs = 407; goto _test_eof
	_test_eof1: cs = 1; goto _test_eof
	_test_eof2: cs = 2; goto _test_eof
	_test_eof3: cs = 3; goto _test_eof
	_test_eof4: cs = 4; goto _test_eof
	_test_eof5: cs = 5; goto _test_eof
	_test_eof6: cs = 6; goto _test_eof
	_test_eof7: cs = 7; goto _test_eof
	_test_eof8: cs = 8; goto _test_eof
	_test_eof408: cs = 408; goto _test_eof
	_test_eof9: cs = 9; goto _test_eof
	_test_eof409: cs = 409; goto _test_eof
	_test_eof10: cs = 10; goto _test_eof
	_test_eof410: cs = 410; goto _test_eof
	_test_eof11: cs = 11; goto _test_eof
	_test_eof12: cs = 12; goto _test_eof
	_test_eof13: cs = 13; goto _test_eof
	_test_eof14: cs = 14; goto _test_eof
	_test_eof15: cs = 15; goto _test_eof
	_test_eof16: cs = 16; goto _test_eof
	_test_eof17: cs = 17; goto _test_eof
	_test_eof18: cs = 18; goto _test_eof
	_test_eof19: cs = 19; goto _test_eof
	_test_eof20: cs = 20; goto _test_eof
	_test_eof21: cs = 21; goto _test_eof
	_test_eof22: cs = 22; goto _test_eof
	_test_eof23: cs = 23; goto _test_eof
	_test_eof411: cs = 411; goto _test_eof
	_test_eof412: cs = 412; goto _test_eof
	_test_eof24: cs = 24; goto _test_eof
	_test_eof413: cs = 413; goto _test_eof
	_test_eof25: cs = 25; goto _test_eof
	_test_eof414: cs = 414; goto _test_eof
	_test_eof26: cs = 26; goto _test_eof
	_test_eof415: cs = 415; goto _test_eof
	_test_eof27: cs = 27; goto _test_eof
	_test_eof28: cs = 28; goto _test_eof
	_test_eof29: cs = 29; goto _test_eof
	_test_eof30: cs = 30; goto _test_eof
	_test_eof31: cs = 31; goto _test_eof
	_test_eof32: cs = 32; goto _test_eof
	_test_eof33: cs = 33; goto _test_eof
	_test_eof34: cs = 34; goto _test_eof
	_test_eof35: cs = 35; goto _test_eof
	_test_eof36: cs = 36; goto _test_eof
	_test_eof37: cs = 37; goto _test_eof
	_test_eof38: cs = 38; goto _test_eof
	_test_eof39: cs = 39; goto _test_eof
	_test_eof40: cs = 40; goto _test_eof
	_test_eof41: cs = 41; goto _test_eof
	_test_eof42: cs = 42; goto _test_eof
	_test_eof43: cs = 43; goto _test_eof
	_test_eof44: cs = 44; goto _test_eof
	_test_eof45: cs = 45; goto _test_eof
	_test_eof46: cs = 46; goto _test_eof
	_test_eof47: cs = 47; goto _test_eof
	_test_eof48: cs = 48; goto _test_eof
	_test_eof49: cs = 49; goto _test_eof
	_test_eof50: cs = 50; goto _test_eof
	_test_eof51: cs = 51; goto _test_eof
	_test_eof52: cs = 52; goto _test_eof
	_test_eof53: cs = 53; goto _test_eof
	_test_eof54: cs = 54; goto _test_eof
	_test_eof55: cs = 55; goto _test_eof
	_test_eof56: cs = 56; goto _test_eof
	_test_eof57: cs = 57; goto _test_eof
	_test_eof58: cs = 58; goto _test_eof
	_test_eof59: cs = 59; goto _test_eof
	_test_eof60: cs = 60; goto _test_eof
	_test_eof61: cs = 61; goto _test_eof
	_test_eof62: cs = 62; goto _test_eof
	_test_eof63: cs = 63; goto _test_eof
	_test_eof64: cs = 64; goto _test_eof
	_test_eof65: cs = 65; goto _test_eof
	_test_eof66: cs = 66; goto _test_eof
	_test_eof67: cs = 67; goto _test_eof
	_test_eof68: cs = 68; goto _test_eof
	_test_eof69: cs = 69; goto _test_eof
	_test_eof70: cs = 70; goto _test_eof
	_test_eof71: cs = 71; goto _test_eof
	_test_eof72: cs = 72; goto _test_eof
	_test_eof73: cs = 73; goto _test_eof
	_test_eof74: cs = 74; goto _test_eof
	_test_eof75: cs = 75; goto _test_eof
	_test_eof76: cs = 76; goto _test_eof
	_test_eof77: cs = 77; goto _test_eof
	_test_eof78: cs = 78; goto _test_eof
	_test_eof79: cs = 79; goto _test_eof
	_test_eof80: cs = 80; goto _test_eof
	_test_eof81: cs = 81; goto _test_eof
	_test_eof82: cs = 82; goto _test_eof
	_test_eof83: cs = 83; goto _test_eof
	_test_eof84: cs = 84; goto _test_eof
	_test_eof85: cs = 85; goto _test_eof
	_test_eof86: cs = 86; goto _test_eof
	_test_eof87: cs = 87; goto _test_eof
	_test_eof88: cs = 88; goto _test_eof
	_test_eof89: cs = 89; goto _test_eof
	_test_eof90: cs = 90; goto _test_eof
	_test_eof91: cs = 91; goto _test_eof
	_test_eof92: cs = 92; goto _test_eof
	_test_eof93: cs = 93; goto _test_eof
	_test_eof94: cs = 94; goto _test_eof
	_test_eof95: cs = 95; goto _test_eof
	_test_eof96: cs = 96; goto _test_eof
	_test_eof97: cs = 97; goto _test_eof
	_test_eof98: cs = 98; goto _test_eof
	_test_eof99: cs = 99; goto _test_eof
	_test_eof100: cs = 100; goto _test_eof
	_test_eof101: cs = 101; goto _test_eof
	_test_eof102: cs = 102; goto _test_eof
	_test_eof103: cs = 103; goto _test_eof
	_test_eof104: cs = 104; goto _test_eof
	_test_eof105: cs = 105; goto _test_eof
	_test_eof106: cs = 106; goto _test_eof
	_test_eof107: cs = 107; goto _test_eof
	_test_eof108: cs = 108; goto _test_eof
	_test_eof109: cs = 109; goto _test_eof
	_test_eof110: cs = 110; goto _test_eof
	_test_eof111: cs = 111; goto _test_eof
	_test_eof112: cs = 112; goto _test_eof
	_test_eof113: cs = 113; goto _test_eof
	_test_eof114: cs = 114; goto _test_eof
	_test_eof115: cs = 115; goto _test_eof
	_test_eof116: cs = 116; goto _test_eof
	_test_eof117: cs = 117; goto _test_eof
	_test_eof118: cs = 118; goto _test_eof
	_test_eof119: cs = 119; goto _test_eof
	_test_eof120: cs = 120; goto _test_eof
	_test_eof121: cs = 121; goto _test_eof
	_test_eof122: cs = 122; goto _test_eof
	_test_eof123: cs = 123; goto _test_eof
	_test_eof124: cs = 124; goto _test_eof
	_test_eof125: cs = 125; goto _test_eof
	_test_eof126: cs = 126; goto _test_eof
	_test_eof127: cs = 127; goto _test_eof
	_test_eof128: cs = 128; goto _test_eof
	_test_eof129: cs = 129; goto _test_eof
	_test_eof130: cs = 130; goto _test_eof
	_test_eof131: cs = 131; goto _test_eof
	_test_eof132: cs = 132; goto _test_eof
	_test_eof133: cs = 133; goto _test_eof
	_test_eof134: cs = 134; goto _test_eof
	_test_eof135: cs = 135; goto _test_eof
	_test_eof136: cs = 136; goto _test_eof
	_test_eof137: cs = 137; goto _test_eof
	_test_eof138: cs = 138; goto _test_eof
	_test_eof139: cs = 139; goto _test_eof
	_test_eof140: cs = 140; goto _test_eof
	_test_eof141: cs = 141; goto _test_eof
	_test_eof142: cs = 142; goto _test_eof
	_test_eof143: cs = 143; goto _test_eof
	_test_eof144: cs = 144; goto _test_eof
	_test_eof145: cs = 145; goto _test_eof
	_test_eof146: cs = 146; goto _test_eof
	_test_eof147: cs = 147; goto _test_eof
	_test_eof148: cs = 148; goto _test_eof
	_test_eof149: cs = 149; goto _test_eof
	_test_eof150: cs = 150; goto _test_eof
	_test_eof151: cs = 151; goto _test_eof
	_test_eof152: cs = 152; goto _test_eof
	_test_eof153: cs = 153; goto _test_eof
	_test_eof154: cs = 154; goto _test_eof
	_test_eof155: cs = 155; goto _test_eof
	_test_eof156: cs = 156; goto _test_eof
	_test_eof157: cs = 157; goto _test_eof
	_test_eof158: cs = 158; goto _test_eof
	_test_eof159: cs = 159; goto _test_eof
	_test_eof160: cs = 160; goto _test_eof
	_test_eof161: cs = 161; goto _test_eof
	_test_eof162: cs = 162; goto _test_eof
	_test_eof416: cs = 416; goto _test_eof
	_test_eof417: cs = 417; goto _test_eof
	_test_eof163: cs = 163; goto _test_eof
	_test_eof418: cs = 418; goto _test_eof
	_test_eof164: cs = 164; goto _test_eof
	_test_eof419: cs = 419; goto _test_eof
	_test_eof165: cs = 165; goto _test_eof
	_test_eof420: cs = 420; goto _test_eof
	_test_eof166: cs = 166; goto _test_eof
	_test_eof167: cs = 167; goto _test_eof
	_test_eof421: cs = 421; goto _test_eof
	_test_eof168: cs = 168; goto _test_eof
	_test_eof169: cs = 169; goto _test_eof
	_test_eof170: cs = 170; goto _test_eof
	_test_eof171: cs = 171; goto _test_eof
	_test_eof172: cs = 172; goto _test_eof
	_test_eof173: cs = 173; goto _test_eof
	_test_eof174: cs = 174; goto _test_eof
	_test_eof175: cs = 175; goto _test_eof
	_test_eof176: cs = 176; goto _test_eof
	_test_eof177: cs = 177; goto _test_eof
	_test_eof178: cs = 178; goto _test_eof
	_test_eof179: cs = 179; goto _test_eof
	_test_eof422: cs = 422; goto _test_eof
	_test_eof180: cs = 180; goto _test_eof
	_test_eof181: cs = 181; goto _test_eof
	_test_eof182: cs = 182; goto _test_eof
	_test_eof183: cs = 183; goto _test_eof
	_test_eof184: cs = 184; goto _test_eof
	_test_eof185: cs = 185; goto _test_eof
	_test_eof186: cs = 186; goto _test_eof
	_test_eof187: cs = 187; goto _test_eof
	_test_eof188: cs = 188; goto _test_eof
	_test_eof189: cs = 189; goto _test_eof
	_test_eof190: cs = 190; goto _test_eof
	_test_eof191: cs = 191; goto _test_eof
	_test_eof192: cs = 192; goto _test_eof
	_test_eof193: cs = 193; goto _test_eof
	_test_eof194: cs = 194; goto _test_eof
	_test_eof195: cs = 195; goto _test_eof
	_test_eof196: cs = 196; goto _test_eof
	_test_eof197: cs = 197; goto _test_eof
	_test_eof198: cs = 198; goto _test_eof
	_test_eof199: cs = 199; goto _test_eof
	_test_eof200: cs = 200; goto _test_eof
	_test_eof201: cs = 201; goto _test_eof
	_test_eof202: cs = 202; goto _test_eof
	_test_eof203: cs = 203; goto _test_eof
	_test_eof204: cs = 204; goto _test_eof
	_test_eof205: cs = 205; goto _test_eof
	_test_eof206: cs = 206; goto _test_eof
	_test_eof207: cs = 207; goto _test_eof
	_test_eof208: cs = 208; goto _test_eof
	_test_eof209: cs = 209; goto _test_eof
	_test_eof210: cs = 210; goto _test_eof
	_test_eof211: cs = 211; goto _test_eof
	_test_eof212: cs = 212; goto _test_eof
	_test_eof213: cs = 213; goto _test_eof
	_test_eof214: cs = 214; goto _test_eof
	_test_eof215: cs = 215; goto _test_eof
	_test_eof216: cs = 216; goto _test_eof
	_test_eof217: cs = 217; goto _test_eof
	_test_eof218: cs = 218; goto _test_eof
	_test_eof219: cs = 219; goto _test_eof
	_test_eof220: cs = 220; goto _test_eof
	_test_eof221: cs = 221; goto _test_eof
	_test_eof222: cs = 222; goto _test_eof
	_test_eof223: cs = 223; goto _test_eof
	_test_eof224: cs = 224; goto _test_eof
	_test_eof225: cs = 225; goto _test_eof
	_test_eof226: cs = 226; goto _test_eof
	_test_eof227: cs = 227; goto _test_eof
	_test_eof228: cs = 228; goto _test_eof
	_test_eof229: cs = 229; goto _test_eof
	_test_eof230: cs = 230; goto _test_eof
	_test_eof231: cs = 231; goto _test_eof
	_test_eof232: cs = 232; goto _test_eof
	_test_eof233: cs = 233; goto _test_eof
	_test_eof234: cs = 234; goto _test_eof
	_test_eof235: cs = 235; goto _test_eof
	_test_eof236: cs = 236; goto _test_eof
	_test_eof237: cs = 237; goto _test_eof
	_test_eof238: cs = 238; goto _test_eof
	_test_eof239: cs = 239; goto _test_eof
	_test_eof240: cs = 240; goto _test_eof
	_test_eof241: cs = 241; goto _test_eof
	_test_eof242: cs = 242; goto _test_eof
	_test_eof243: cs = 243; goto _test_eof
	_test_eof244: cs = 244; goto _test_eof
	_test_eof245: cs = 245; goto _test_eof
	_test_eof246: cs = 246; goto _test_eof
	_test_eof247: cs = 247; goto _test_eof
	_test_eof248: cs = 248; goto _test_eof
	_test_eof249: cs = 249; goto _test_eof
	_test_eof250: cs = 250; goto _test_eof
	_test_eof251: cs = 251; goto _test_eof
	_test_eof252: cs = 252; goto _test_eof
	_test_eof253: cs = 253; goto _test_eof
	_test_eof254: cs = 254; goto _test_eof
	_test_eof255: cs = 255; goto _test_eof
	_test_eof256: cs = 256; goto _test_eof
	_test_eof257: cs = 257; goto _test_eof
	_test_eof258: cs = 258; goto _test_eof
	_test_eof259: cs = 259; goto _test_eof
	_test_eof260: cs = 260; goto _test_eof
	_test_eof261: cs = 261; goto _test_eof
	_test_eof262: cs = 262; goto _test_eof
	_test_eof263: cs = 263; goto _test_eof
	_test_eof264: cs = 264; goto _test_eof
	_test_eof265: cs = 265; goto _test_eof
	_test_eof266: cs = 266; goto _test_eof
	_test_eof267: cs = 267; goto _test_eof
	_test_eof268: cs = 268; goto _test_eof
	_test_eof269: cs = 269; goto _test_eof
	_test_eof270: cs = 270; goto _test_eof
	_test_eof271: cs = 271; goto _test_eof
	_test_eof272: cs = 272; goto _test_eof
	_test_eof273: cs = 273; goto _test_eof
	_test_eof274: cs = 274; goto _test_eof
	_test_eof275: cs = 275; goto _test_eof
	_test_eof276: cs = 276; goto _test_eof
	_test_eof277: cs = 277; goto _test_eof
	_test_eof278: cs = 278; goto _test_eof
	_test_eof279: cs = 279; goto _test_eof
	_test_eof280: cs = 280; goto _test_eof
	_test_eof281: cs = 281; goto _test_eof
	_test_eof282: cs = 282; goto _test_eof
	_test_eof283: cs = 283; goto _test_eof
	_test_eof284: cs = 284; goto _test_eof
	_test_eof285: cs = 285; goto _test_eof
	_test_eof286: cs = 286; goto _test_eof
	_test_eof287: cs = 287; goto _test_eof
	_test_eof288: cs = 288; goto _test_eof
	_test_eof289: cs = 289; goto _test_eof
	_test_eof290: cs = 290; goto _test_eof
	_test_eof291: cs = 291; goto _test_eof
	_test_eof423: cs = 423; goto _test_eof
	_test_eof424: cs = 424; goto _test_eof
	_test_eof292: cs = 292; goto _test_eof
	_test_eof425: cs = 425; goto _test_eof
	_test_eof293: cs = 293; goto _test_eof
	_test_eof426: cs = 426; goto _test_eof
	_test_eof294: cs = 294; goto _test_eof
	_test_eof427: cs = 427; goto _test_eof
	_test_eof295: cs = 295; goto _test_eof
	_test_eof296: cs = 296; goto _test_eof
	_test_eof428: cs = 428; goto _test_eof
	_test_eof297: cs = 297; goto _test_eof
	_test_eof298: cs = 298; goto _test_eof
	_test_eof299: cs = 299; goto _test_eof
	_test_eof300: cs = 300; goto _test_eof
	_test_eof301: cs = 301; goto _test_eof
	_test_eof302: cs = 302; goto _test_eof
	_test_eof303: cs = 303; goto _test_eof
	_test_eof304: cs = 304; goto _test_eof
	_test_eof305: cs = 305; goto _test_eof
	_test_eof306: cs = 306; goto _test_eof
	_test_eof307: cs = 307; goto _test_eof
	_test_eof308: cs = 308; goto _test_eof
	_test_eof429: cs = 429; goto _test_eof
	_test_eof309: cs = 309; goto _test_eof
	_test_eof310: cs = 310; goto _test_eof
	_test_eof311: cs = 311; goto _test_eof
	_test_eof312: cs = 312; goto _test_eof
	_test_eof313: cs = 313; goto _test_eof
	_test_eof314: cs = 314; goto _test_eof
	_test_eof315: cs = 315; goto _test_eof
	_test_eof316: cs = 316; goto _test_eof
	_test_eof317: cs = 317; goto _test_eof
	_test_eof318: cs = 318; goto _test_eof
	_test_eof319: cs = 319; goto _test_eof
	_test_eof320: cs = 320; goto _test_eof
	_test_eof321: cs = 321; goto _test_eof
	_test_eof322: cs = 322; goto _test_eof
	_test_eof323: cs = 323; goto _test_eof
	_test_eof324: cs = 324; goto _test_eof
	_test_eof325: cs = 325; goto _test_eof
	_test_eof326: cs = 326; goto _test_eof
	_test_eof327: cs = 327; goto _test_eof
	_test_eof328: cs = 328; goto _test_eof
	_test_eof329: cs = 329; goto _test_eof
	_test_eof330: cs = 330; goto _test_eof
	_test_eof331: cs = 331; goto _test_eof
	_test_eof332: cs = 332; goto _test_eof
	_test_eof333: cs = 333; goto _test_eof
	_test_eof334: cs = 334; goto _test_eof
	_test_eof335: cs = 335; goto _test_eof
	_test_eof336: cs = 336; goto _test_eof
	_test_eof337: cs = 337; goto _test_eof
	_test_eof338: cs = 338; goto _test_eof
	_test_eof339: cs = 339; goto _test_eof
	_test_eof340: cs = 340; goto _test_eof
	_test_eof341: cs = 341; goto _test_eof
	_test_eof342: cs = 342; goto _test_eof
	_test_eof343: cs = 343; goto _test_eof
	_test_eof344: cs = 344; goto _test_eof
	_test_eof345: cs = 345; goto _test_eof
	_test_eof346: cs = 346; goto _test_eof
	_test_eof347: cs = 347; goto _test_eof
	_test_eof348: cs = 348; goto _test_eof
	_test_eof349: cs = 349; goto _test_eof
	_test_eof350: cs = 350; goto _test_eof
	_test_eof351: cs = 351; goto _test_eof
	_test_eof352: cs = 352; goto _test_eof
	_test_eof353: cs = 353; goto _test_eof
	_test_eof354: cs = 354; goto _test_eof
	_test_eof355: cs = 355; goto _test_eof
	_test_eof356: cs = 356; goto _test_eof
	_test_eof357: cs = 357; goto _test_eof
	_test_eof358: cs = 358; goto _test_eof
	_test_eof359: cs = 359; goto _test_eof
	_test_eof360: cs = 360; goto _test_eof
	_test_eof361: cs = 361; goto _test_eof
	_test_eof362: cs = 362; goto _test_eof
	_test_eof363: cs = 363; goto _test_eof
	_test_eof364: cs = 364; goto _test_eof
	_test_eof365: cs = 365; goto _test_eof
	_test_eof366: cs = 366; goto _test_eof
	_test_eof367: cs = 367; goto _test_eof
	_test_eof368: cs = 368; goto _test_eof
	_test_eof369: cs = 369; goto _test_eof
	_test_eof370: cs = 370; goto _test_eof
	_test_eof371: cs = 371; goto _test_eof
	_test_eof372: cs = 372; goto _test_eof
	_test_eof373: cs = 373; goto _test_eof
	_test_eof374: cs = 374; goto _test_eof
	_test_eof375: cs = 375; goto _test_eof
	_test_eof376: cs = 376; goto _test_eof
	_test_eof377: cs = 377; goto _test_eof
	_test_eof378: cs = 378; goto _test_eof
	_test_eof379: cs = 379; goto _test_eof
	_test_eof380: cs = 380; goto _test_eof
	_test_eof381: cs = 381; goto _test_eof
	_test_eof382: cs = 382; goto _test_eof
	_test_eof383: cs = 383; goto _test_eof
	_test_eof384: cs = 384; goto _test_eof
	_test_eof385: cs = 385; goto _test_eof
	_test_eof386: cs = 386; goto _test_eof
	_test_eof387: cs = 387; goto _test_eof
	_test_eof388: cs = 388; goto _test_eof
	_test_eof389: cs = 389; goto _test_eof
	_test_eof390: cs = 390; goto _test_eof
	_test_eof391: cs = 391; goto _test_eof
	_test_eof392: cs = 392; goto _test_eof
	_test_eof393: cs = 393; goto _test_eof
	_test_eof394: cs = 394; goto _test_eof
	_test_eof395: cs = 395; goto _test_eof
	_test_eof396: cs = 396; goto _test_eof
	_test_eof397: cs = 397; goto _test_eof
	_test_eof398: cs = 398; goto _test_eof
	_test_eof399: cs = 399; goto _test_eof
	_test_eof400: cs = 400; goto _test_eof
	_test_eof401: cs = 401; goto _test_eof
	_test_eof402: cs = 402; goto _test_eof
	_test_eof403: cs = 403; goto _test_eof
	_test_eof404: cs = 404; goto _test_eof
	_test_eof405: cs = 405; goto _test_eof

	_test_eof: {}
	if p == eof {
		switch cs {
		case 407:
			goto tr787
		case 408:
			goto tr788
		case 9:
			goto tr10
		case 409:
			goto tr789
		case 10:
			goto tr13
		case 410:
			goto tr790
		case 416, 423:
//line parse.rl:551
 start=0;end=6;m=0;d=1; 
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
		case 422, 429:
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
		case 421, 428:
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
		case 411:
//line parse.rl:557
 start=1970;end=2099;m=0;d=1; 
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
		case 418, 425:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 start=m; end=6;d=0;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
		case 419, 426:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:551
 end=m; d=1;
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
		case 420, 427:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:552
d=m
//line parse.rl:363

            {
                const sundaysAtFirst = uint64(1 | 1<<7 | 1<<14 | 1<<21 | 1<<28 | 1<<35 | 1<<42)
                // x:= [...]uint64{
                //     sundaysAtFirst|sundaysAtFirst<<1|sundaysAtFirst<<2|sundaysAtFirst<<3|sundaysAtFirst<<4|sundaysAtFirst<<5|sundaysAtFirst<<6, //every day
                //     sundaysAtFirst<<1|sundaysAtFirst<<3|sundaysAtFirst<<5|sundaysAtFirst<<7, //every 2nd day
                //     sundaysAtFirst<<2|sundaysAtFirst<<5|sundaysAtFirst<<8, //every 3rd day
                //     sundaysAtFirst<<3|sundaysAtFirst<<6|sundaysAtFirst<<9, //every 4th day
                //     sundaysAtFirst<<4|sundaysAtFirst<<8, //every 5th day
                //     sundaysAtFirst<<5, //every 6th day
                //     sundaysAtFirst<<6, //every 7th day
                // }
                x := [...]uint64{
                    1|1<<1|1<<2|1<<3|1<<4|1<<5|1<<6, //every day
                    1<<1|1<<3|1<<5|1<<7, //every 2nd day
                    1<<2|1<<5|1<<8, //every 3rd day
                    1<<3|1<<6|1<<9, //every 4th day
                    1<<4|1<<8, //every 5th day
                    1<<5, //every 6th day
                    1<<6, //every 7th day
                }
                if d>7{
                    return nt, fmt.Errorf("invalid day of week */%d", d)
                }
                if start>7 {
                    return nt, fmt.Errorf("invalid start day of week %d", start)
                }
                if end==7{
                    end=6 // for compatibility with older crons
                }
                if end>6 {
                    return nt, fmt.Errorf("invalid end day of week %d", start)
                }
                if start>end {
                    return nt, errors.New("invalid day of week range start must be before end")
                }

                // handle the case that isn't a 
                dayRange := (^uint64(0))<<(64 - (end-start+1))>>(64 - end-1)
                fmt.Printf("dayrange %b\n", dayRange)
                if d==0{
                    nt.dow |= sundaysAtFirst<<start
                }else{
                    dayRange&=x[d-1]
                    nt.dow |= sundaysAtFirst*dayRange
                }
            }
        
		case 413:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 start=m; end=2099;d=0;
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
		case 414:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:557
 end=m; d=1;
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
		case 415:
//line parse.rl:507

            m, err = strconv.ParseUint(s[mark:p], 10, 64)
            if err!=nil {
                return nt,  fmt.Errorf("unable to parse %s into a number", s[mark:p])
            }
        
//line parse.rl:558
d=m
//line parse.rl:412

            // short circuit for the most common cases.
            if d>128 {
                return nt, fmt.Errorf("invalid year */%d", d)
            }
            if start<1970 || start>2099 {
                return nt, fmt.Errorf("invalid start year %d", start)
            }
            if end<1970 || end>2099 {
                return nt, fmt.Errorf("invalid end year %d", end)
            }
            if d==0{
                nt.year.set(int(start))
            }else if d==1{
                nt.year.low=^uint64(0)
                nt.year.high=^uint64(0)
            }else{
                for i:=start-1970;i<2099;i+=d{
                        nt.year.set(int(i))
                }
            }
        
//line parse.go:22930
		}
	}

	_out: {}
	}

//line parse.rl:591
    // fmt.Printf("in parser: backtrack %d\n, year %b, %b \nmonth %b, \ndom %b, \ndow %b, \nhour %b, \nmin %b, \ns %b\n", backtrack, nt.year.low, nt.year.high, nt.month, nt.dom, nt.dow, nt.hour, nt.minute, nt.second)
    if nt.minute==0||nt.hour==0||nt.dom==0||nt.month==0||nt.dow==0||nt.year.isZero() {
        return nt, fmt.Errorf("failed to parse cron string '%s'", s)
    }
    return nt,  nil
}


/*
            # TODO(docmerlin): implement these
            #second = ( star | digits );
            #@yearly	   Run once a year, "1<<0 1<<0 1<<1 1<<1 *".
            #@annually	   (same as @yearly)
            #@monthly	   Run once a month, "1<<0	1<<0 1<<1 * *".
            #@weekly	   Run once a week, "1<<0 1<<0 * * 1<<0".
            #@daily	   Run once a day, "1<<0 1<<0	* * *".
            #@midnight	   (same as @daily)
            #@hourly	   Run once an hour, "1<<0	* * * *".
        */
            //#@every_minute   Run once a minute, "*/1<<1 * * * *".
            //#@every_second   Run once a second.

